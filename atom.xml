<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Abnerwei</title>
  
  <subtitle>人活到极致, 一定是素与简 | abnerwei.com</subtitle>
  <link href="https://abnerwei.com/atom.xml" rel="self"/>
  
  <link href="https://abnerwei.com/"/>
  <updated>2020-11-02T02:51:59.000Z</updated>
  <id>https://abnerwei.com/</id>
  
  <author>
    <name>Abnerwei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>国密算法浅析</title>
    <link href="https://abnerwei.com/post/a08a8787"/>
    <id>https://abnerwei.com/post/a08a8787</id>
    <published>2020-11-02T02:51:59.000Z</published>
    <updated>2020-11-02T02:51:59.000Z</updated>
    
    <content type="html"><![CDATA[<div class="tag-plugin note" ><div class="title"><strong>前言</strong></div><div class="body"><p>最近论坛上看到很多人讨论国密算法，但是实际工作中基本没有用到过。其实很多国家都有自己的国家级加密算法，韩国的<a href="https://en.wikipedia.org/wiki/ARIA_(cipher)">ARIA</a>、日本的<a href="https://zh.wikipedia.org/wiki/Camellia">Camellia</a>、俄罗斯（前苏联）的<a href="https://en.wikipedia.org/wiki/GOST_(block_cipher)">GOST</a>，那么国密算法有什么好处和优点？</p></div></div><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>国密即国家密码局认定的国产密码算法，即商用密码。商用密码主要用于对不涉及国家秘密内容但又具有敏感性的内部信息、行政事务信息、经济信息等进行加密保护。现在主要使用在国有企业以及银行等地方。</p><p>国密即国家密码局认定的国产密码算法。主要有SM1、SM2、SM3、SM4。密钥长度和分组长度均为128位。</p><h2 id="SM1"><a href="#SM1" class="headerlink" title="SM1"></a>SM1</h2><p><strong>SM1</strong> 为对称加密，加密强度与AES相当。算法核心闭源，调用该算法时，需要通过加密芯片的接口配合进行调用。<br>采用该算法已经研制了系列芯片、智能IC卡、智能密码钥匙、加密卡、加密机等安全产品，主要应用于电子政务、电子商务及国民经济的各个应用领域（包括国家政务通、警务通等重要领域）。</p><p>SM1分组密码和SSF33分组密码均为国密分组密码标标准，SM1和SSF33的密钥长度和分组长度均为128比特。</p><p>目前这两个分组密码标准的算法尚未公开，其实现仅可以通过硬件芯片的方式获得，目前很多国产密码设备均包含这两个分组密码的硬件实现，由国家密码管理局制定的《智能IC卡及智能密码钥匙密码应用接口规范》中包含了对SM1分组密码的ECB、CBC、CFB、OFB加密模式和CBC-MAC的算法定义。</p><h3 id="Engine调用"><a href="#Engine调用" class="headerlink" title="Engine调用"></a>Engine调用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* load engine with SM1 support */</span></span><br><span class="line">ENGINE *engine = <span class="built_in">ENGINE_by_id</span>(<span class="string">&quot;sdf&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (engine == <span class="literal">NULL</span>) <span class="keyword">goto</span> err;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* load sm1-cbc cipher from engine */</span></span><br><span class="line"><span class="keyword">const</span> EVP_CIPHER *cipher = <span class="built_in">ENGINE_get_cipher</span>(engine, NID_sm1_cbc);</span><br><span class="line"><span class="keyword">if</span> (cipher == <span class="literal">NULL</span>) <span class="keyword">goto</span> err;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* encrypt with sm1-cbc implemented with engine */</span></span><br><span class="line">EVP_CIPHER_CTX *cctx = <span class="built_in">EVP_CIPHER_CTX_new</span>();</span><br><span class="line"><span class="keyword">if</span> (cctx == <span class="literal">NULL</span>) <span class="keyword">goto</span> err;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> != <span class="built_in">EVP_EncryptInit_ex</span>(cctx, cipher, engine, key, iv)) <span class="keyword">goto</span> err;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> != <span class="built_in">EVP_EncryptUpdate</span>(cctx, ...)) <span class="keyword">goto</span> err;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> != <span class="built_in">EVP_EncryptFinal_ex</span>(cctx, ...)) <span class="keyword">goto</span> err;</span><br></pre></td></tr></table></figure><h3 id="SM1测试数据"><a href="#SM1测试数据" class="headerlink" title="SM1测试数据"></a>SM1测试数据</h3><h4 id="SM1-ECB"><a href="#SM1-ECB" class="headerlink" title="SM1-ECB"></a>SM1-ECB</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> key[<span class="number">16</span>] = &#123;</span><br><span class="line"><span class="number">0x40</span>,<span class="number">0xbb</span>,<span class="number">0x12</span>,<span class="number">0xdd</span>,<span class="number">0x6a</span>,<span class="number">0x82</span>,<span class="number">0x73</span>,<span class="number">0x86</span>,<span class="number">0x7f</span>,<span class="number">0x35</span>,<span class="number">0x29</span>,<span class="number">0xd3</span>,<span class="number">0x54</span>,<span class="number">0xb4</span>,<span class="number">0xa0</span>,<span class="number">0x26</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> plaintext[<span class="number">16</span>] = &#123;</span><br><span class="line"><span class="number">0xff</span>,<span class="number">0xee</span>,<span class="number">0xdd</span>,<span class="number">0xcc</span>,<span class="number">0xbb</span>,<span class="number">0xaa</span>,<span class="number">0x99</span>,<span class="number">0x88</span>,<span class="number">0x77</span>,<span class="number">0x66</span>,<span class="number">0x55</span>,<span class="number">0x44</span>,<span class="number">0x33</span>,<span class="number">0x22</span>,<span class="number">0x11</span>,<span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ciphertext[<span class="number">16</span>] = &#123;</span><br><span class="line"><span class="number">0x6d</span>,<span class="number">0x7f</span>,<span class="number">0x45</span>,<span class="number">0xb0</span>,<span class="number">0x8b</span>,<span class="number">0xc4</span>,<span class="number">0xd9</span>,<span class="number">0x66</span>,<span class="number">0x44</span>,<span class="number">0x4c</span>,<span class="number">0x86</span>,<span class="number">0xc2</span>,<span class="number">0xb0</span>,<span class="number">0x7d</span>,<span class="number">0x29</span>,<span class="number">0x93</span>&#125;;</span><br></pre></td></tr></table></figure><h4 id="SM1-CBC"><a href="#SM1-CBC" class="headerlink" title="SM1-CBC"></a>SM1-CBC</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> sm1_cbc_test_key[<span class="number">16</span>] = &#123;</span><br><span class="line"><span class="number">0x40</span>,<span class="number">0xbb</span>,<span class="number">0x12</span>,<span class="number">0xdd</span>,<span class="number">0x6a</span>,<span class="number">0x82</span>,<span class="number">0x73</span>,<span class="number">0x86</span>,<span class="number">0x7f</span>,<span class="number">0x35</span>,<span class="number">0x29</span>,<span class="number">0xd3</span>,<span class="number">0x54</span>,<span class="number">0xb4</span>,<span class="number">0xa0</span>,<span class="number">0x26</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> sm1_cbc_test_iv[<span class="number">16</span>] = &#123;</span><br><span class="line"><span class="number">0xe8</span>,<span class="number">0x3d</span>,<span class="number">0x17</span>,<span class="number">0x15</span>,<span class="number">0xac</span>,<span class="number">0xf3</span>,<span class="number">0x48</span>,<span class="number">0x63</span>,<span class="number">0xac</span>,<span class="number">0xeb</span>,<span class="number">0x93</span>,<span class="number">0xe0</span>,<span class="number">0xe5</span>,<span class="number">0xab</span>,<span class="number">0x8b</span>,<span class="number">0x90</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> sm1_cbc_test_plaintext[<span class="number">32</span>] = &#123;</span><br><span class="line"><span class="number">0xff</span>,<span class="number">0xee</span>,<span class="number">0xdd</span>,<span class="number">0xcc</span>,<span class="number">0xbb</span>,<span class="number">0xaa</span>,<span class="number">0x99</span>,<span class="number">0x88</span>,<span class="number">0x77</span>,<span class="number">0x66</span>,<span class="number">0x55</span>,<span class="number">0x44</span>,<span class="number">0x33</span>,<span class="number">0x22</span>,<span class="number">0x11</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x11</span>,<span class="number">0x22</span>,<span class="number">0x33</span>,<span class="number">0x44</span>,<span class="number">0x55</span>,<span class="number">0x66</span>,<span class="number">0x77</span>,<span class="number">0x88</span>,<span class="number">0x99</span>,<span class="number">0xaa</span>,<span class="number">0xbb</span>,<span class="number">0xcc</span>,<span class="number">0xdd</span>,<span class="number">0xee</span>,<span class="number">0xff</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> sm1_cbc_test_ciphertext[<span class="number">32</span>] = &#123;</span><br><span class="line"><span class="number">0x3a</span>,<span class="number">0x70</span>,<span class="number">0xb5</span>,<span class="number">0xd4</span>,<span class="number">0x9a</span>,<span class="number">0x78</span>,<span class="number">0x2c</span>,<span class="number">0x07</span>,<span class="number">0x2d</span>,<span class="number">0xe1</span>,<span class="number">0x13</span>,<span class="number">0x43</span>,<span class="number">0x81</span>,<span class="number">0x9e</span>,<span class="number">0xc6</span>,<span class="number">0x59</span>,</span><br><span class="line"><span class="number">0xf8</span>,<span class="number">0xfc</span>,<span class="number">0x7a</span>,<span class="number">0xf0</span>,<span class="number">0x5e</span>,<span class="number">0x7c</span>,<span class="number">0x6d</span>,<span class="number">0xfb</span>,<span class="number">0x5f</span>,<span class="number">0x81</span>,<span class="number">0x09</span>,<span class="number">0x0f</span>,<span class="number">0x0d</span>,<span class="number">0x87</span>,<span class="number">0x91</span>,<span class="number">0xb2</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="SM2"><a href="#SM2" class="headerlink" title="SM2"></a>SM2</h2><p>SM2为非对称加密，基于ECC（<a href="https://en.wikipedia.org/wiki/Elliptic-curve_cryptography">椭圆曲线算法</a>）。该算法已公开。由于该算法基于ECC，故其签名速度与秘钥生成速度都快于RSA。ECC 256位（SM2采用的就是ECC 256位的一种）安全强度比RSA 2048位高，但运算速度快于RSA。</p><h3 id="SM2和椭圆曲线算法是什么关系"><a href="#SM2和椭圆曲线算法是什么关系" class="headerlink" title="SM2和椭圆曲线算法是什么关系?"></a>SM2和椭圆曲线算法是什么关系?</h3><p>椭圆曲线算法是通过方程确定的，SM2算法采用的椭圆曲线方程为：</p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>y</mi><mn>2</mn></msup><mo>=</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mi>a</mi><mo separator="true">⋅</mo><mi>x</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">y^2 = x^3 + a·x + b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span><p>在SM2算法标准中，通过指定a、b系数，确定了唯一的标准曲线。同时，为了将曲线映射为加密算法，SM2标准中还确定了其它参数，供算法程序使用。</p><h3 id="SM2加解密步骤"><a href="#SM2加解密步骤" class="headerlink" title="SM2加解密步骤"></a>SM2加解密步骤</h3><p><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">参考文献</a></p><h3 id="基于国密（SM2）HTTPS证书"><a href="#基于国密（SM2）HTTPS证书" class="headerlink" title="基于国密（SM2）HTTPS证书"></a>基于国密（SM2）HTTPS证书</h3><p>国产密码算法是保障我国网络安全自主可控的重要基础。国密标准（SM2）证书同时通过 “SM2/RSA” 双证书服务帮助网站系统自适应兼容所有浏览器，兼顾国密合规和全球通用。</p><p>国密 SSL 协议的握手过程如下：(基本兼容常规RSA证书握手流程)</p><ul><li>1.交换 Hello 消息来协商密码套件，交换随机数，决定是否会话重用。</li><li>2.交换必要的参数，协商预主密钥。</li><li>3.交换证书信息，用于验证对方。</li><li>4.使用预主密钥和交换的随机数生成主密钥。</li><li>5.向记录层提供安全参数。</li><li>6.验证双方计算的安全参数的一致性、握手过程的真实性和完整性。</li></ul><p>实现以上握手过程，需要客户端（浏览器）和服务端都支持国密算法。虽然目前 SM2/SM3/SM9 算法已相继纳入国际标准体系，但要实现客户端和服务端的广泛兼容，仍然需要漫长的推进过程。在此期间，通过技术解决方案让浏览器端、服务端都能够支持国密算法和国密 SSL 证书，才能推动国密算法普及应用。<br>因此，在服务端实现基于国密算法的 SSL 认证和 HTTPS 加密，需要网站运营者向工信部许可的权威电子认证机构，申请符合国密标准的国密 SSL 证书，并将证书部署在支持国密标准证书的 web 服务器上。</p><h4 id="支持国密（SM2）标准证书的浏览器"><a href="#支持国密（SM2）标准证书的浏览器" class="headerlink" title="支持国密（SM2）标准证书的浏览器"></a>支持国密（SM2）标准证书的浏览器</h4><p>360浏览器、密信浏览器、红莲花浏览器等可支持国密算法。</p><h2 id="SM3"><a href="#SM3" class="headerlink" title="SM3"></a>SM3</h2><p>SM3 一种密码散列函数标准，由国家密码管理局于2010年12月17日发布。相关标准为”GM/T 0004-2012 《SM3密码杂凑算法》”。</p><p>在商用密码体系中，SM3主要用于数字签名及验证、消息认证码生成及验证、随机数生成等，其算法公开。据国家密码管理局表示，其安全性及效率与SHA-256相当。</p><p>在信息安全中，有许多重要的应用，都使用了密码散列函数来实现，例如数字签名，消息认证码。对标MD5算法。<br>整个算法的执行过程可以概括成四个步骤：消息填充、消息扩展、迭代压缩、输出结果。具体详细流程不再赘述，参考文末国家密码局文献。</p><h2 id="SM4"><a href="#SM4" class="headerlink" title="SM4"></a>SM4</h2><p>SM4 无线局域网标准的分组数据算法。对称加密，密钥长度和分组长度均为128位。由国家密码管理局于2012年3月21日发布，相关标准为”GM/T 0002-2012《SM4分组密码算法》（原SMS4分组密码算法）”。2016年8月，成为中国国家密码标准（GB/T 32907-2016）。</p><p>SM4密码算法是一个分组算法，数据分组长度为128比特，密钥长度为128 比特。加密算法与密钥扩展算法均采取32轮迭代结构。SM4密码算法以字节(8位)和字节(32位)作为单位进行数据处理。SM4密码算法是对合运算，因此解密算法与加密算法的结构相同，只是轮密钥的使用顺序相反，解密轮密钥是加密轮密钥的逆序。　　</p><p><img src="https://cdn.jsdelivr.net/gh/abnerwei/cdn/images/sm4.jpg" alt="SM4"></p><p>SM4算法的基本内容有以下几方面：</p><ul><li>基本运算：SM4密码算法使用模2加和循环移位作为基本运算。</li><li>基本密码部件：SM4密码算法使用了S盒、非线性变换τ、线性变换部件L、合成变换T基本密码部件。</li><li>轮函数：SM4密码算法采用对基本轮函数进行迭代的结构。利用上述基本密码部件，便可构成轮函数。SM4密码算法的轮函数是一种以字为处理单位的密码函数。</li><li>加密算法：SM4密码算法是一个分组算法。数据分组长度为128比特，密钥长度为128比特。加密算法采用32轮迭代结构，每轮使用一个轮密钥。</li><li>解密算法：SM4密码算法是对合运算，因此解密算法与加密算法的结构相同，只是轮密铝的使用顺序相反，解密轮密钥是加密轮密钥的逆序。</li><li>密钥扩展算法：SM4密码算法使用128位的加密密钥，并采用32轮法代加密结构，每一轮加密使用一个32位的轮密钥，共使用32个轮密钥。因此需要使用密钥扩展算法，从加密密钥产生出32个轮密钥。</li></ul><div class="tag-plugin note" ><div class="title"><strong>提示</strong></div><div class="body"><p>由于SM1、SM4加解密的分组大小为128bit，故对消息进行加解密时，若消息长度过长，需要进行分组，要消息长度不足，则要进行填充。</p></div></div><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><blockquote><ol><li><a href="https://www.oscca.gov.cn/sca/xxgk/2010-12/17/1002386/files/b791a9f908bb4803875ab6aeeb7b4e03.pdf">SM2椭圆曲线公钥密码算法</a></li><li><a href="https://www.oscca.gov.cn/sca/xxgk/2010-12/17/1002386/files/b965ce832cc34bc191cb1cde446b860d.pdf">SM2椭圆曲线公钥密码算法推荐曲线参数</a></li><li><a href="https://www.oscca.gov.cn/sca/xxgk/2010-12/17/1002389/files/302a3ada057c4a73830536d03e683110.pdf">SM3密码杂凑算法</a></li><li><a href="https://zh.wikipedia.org/wiki/SM4">SM4 Wiki简介</a></li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;tag-plugin note&quot; &gt;&lt;div class=&quot;title&quot;&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/div&gt;&lt;div class=&quot;body&quot;&gt;&lt;p&gt;最近论坛上看到很多人讨论国密算法，但是实际工作中基本没有用到过。其实很多国家都有自己的国家</summary>
      
    
    
    
    <category term="观点浅析" scheme="https://abnerwei.com/categories/%E8%A7%82%E7%82%B9%E6%B5%85%E6%9E%90/"/>
    
    
    <category term="国密算法" scheme="https://abnerwei.com/tags/%E5%9B%BD%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    
    <category term="加密算法" scheme="https://abnerwei.com/tags/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>把二叉搜索树转换为累加树</title>
    <link href="https://abnerwei.com/post/911c29b3"/>
    <id>https://abnerwei.com/post/911c29b3</id>
    <published>2020-09-21T14:05:00.000Z</published>
    <updated>2020-09-21T14:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Convert BST to Greater Tree ⭐️</strong></p><blockquote><p><em><strong>LeetCode每日一题 2020.09.21</strong></em></p></blockquote><p>给定一个二叉搜索树（Binary Search Tree），把它转换成为累加树（Greater Tree)，使得每个节点的值是原来的节点值加上所有大于它的节点值之和。</p><span id="more"></span><p><strong>Example:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入: 原始二叉搜索树:</span><br><span class="line">              5</span><br><span class="line">            /   \</span><br><span class="line">           2     13</span><br><span class="line"></span><br><span class="line">输出: 转换为累加树:</span><br><span class="line">             18</span><br><span class="line">            /   \</span><br><span class="line">          20     13</span><br></pre></td></tr></table></figure><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>按照题目大意根节点 <code>5</code>，整个树中大于根节点的有 <code>13</code>，所以当前节点累加后为 <code>18</code>，以此类推左子树为 <code>2+5+13=20</code>，右子树根节点为 <code>13</code>。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="方式一-反中序遍历"><a href="#方式一-反中序遍历" class="headerlink" title="方式一: 反中序遍历"></a>方式一: 反中序遍历</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>反中序遍历该二叉搜索树，记录过程中的节点值之和，并不断更新当前遍历到的节点的节点值，即可得到题目要求的累加树。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Left *TreeNode</span></span><br><span class="line"><span class="comment"> *     Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convertBST</span><span class="params">(root *TreeNode)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(*TreeNode)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(node *TreeNode)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> node != <span class="literal">nil</span> &#123;</span><br><span class="line">            dfs(node.Right)</span><br><span class="line">            sum += node.Val</span><br><span class="line">            node.Val = sum</span><br><span class="line">            dfs(node.Left)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root)</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li>时间复杂度: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>, 其中 n 是二叉树中的节点个数。</li><li>空间复杂度: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>, 为递归过程中栈的开销，平均情况下为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(logn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，最坏情况下树呈现链状，为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</li></ul><h3 id="方式二-Morris-反中序遍历-思路来自官方题解"><a href="#方式二-Morris-反中序遍历-思路来自官方题解" class="headerlink" title="方式二: Morris 反中序遍历 (思路来自官方题解)"></a>方式二: Morris 反中序遍历 (思路来自官方题解)</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><ul><li><p>如果当前节点的右孩子为空，则输出当前节点并将其左孩子作为当前节点。</p></li><li><p>如果当前节点的右孩子不为空，在当前节点的右子树中找到当前节点在中序遍历下的后继节点。</p><ul><li>a) 如果后继节点的左孩子为空，将它的左孩子设置为当前节点。当前节点更新为当前节点的右孩子。</li><li>b) 如果后驱节点的左孩子为当前节点，将它的左孩子重新设为空（恢复树的形状）。输出当前节点。当前节点更新为当前节点的左孩子。</li></ul></li><li><p>重复以上步骤直到当前节点为空。</p></li></ul><h4 id="二叉搜索树特性"><a href="#二叉搜索树特性" class="headerlink" title="二叉搜索树特性"></a>二叉搜索树特性</h4><ol><li>若任意结点的左子树不空，则左子树上所有结点的值均不大于它的根结点的值。</li><li>若任意结点的右子树不空，则右子树上所有结点的值均不小于它的根结点的值。</li><li>任意结点的左、右子树也分别为二叉搜索树。</li></ol><div class="tag-plugin note" ><div class="title"><strong>提示</strong></div><div class="body"><p>Morris方法用到了线索二叉树（threaded binary tree）的概念。在Morris方法中不需要为每个节点额外分配指针指向其前驱（predecessor）和后继节点（successor），只需要利用叶子节点中的左右空指针指向某种顺序遍历下的前驱节点或后继节点就可以了。此题中利用二叉搜索树的特性使用反中序遍历</p></div></div><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convertBST</span><span class="params">(root *TreeNode)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    node := root</span><br><span class="line">    <span class="keyword">for</span> node != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> node.Right == <span class="literal">nil</span> &#123;</span><br><span class="line">            sum += node.Val</span><br><span class="line">            node.Val = sum</span><br><span class="line">            node = node.Left</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            successor := node.Right</span><br><span class="line">            <span class="keyword">for</span> successor.Left != <span class="literal">nil</span> &amp;&amp; successor.Left != node &#123;</span><br><span class="line">                successor = successor.Left</span><br><span class="line">            &#125;</span><br><span class="line">                <span class="comment">// 2.a)</span></span><br><span class="line">            <span class="keyword">if</span> successor.Left == <span class="literal">nil</span> &#123;</span><br><span class="line">                successor.Left = node</span><br><span class="line">                node = node.Right</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 2.b)</span></span><br><span class="line">                successor.Left = <span class="literal">nil</span></span><br><span class="line">                sum += node.Val</span><br><span class="line">                node.Val = sum</span><br><span class="line">                node = node.Left</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li>时间复杂度: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>, 因为只用了两个辅助指针。</li><li>空间复杂度: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Convert BST to Greater Tree ⭐️&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;LeetCode每日一题 2020.09.21&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;给定一个二叉搜索树（Binary Search Tree），把它转换成为累加树（Greater Tree)，使得每个节点的值是原来的节点值加上所有大于它的节点值之和。&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="https://abnerwei.com/categories/leetcode/"/>
    
    
    <category term="Tree" scheme="https://abnerwei.com/tags/tree/"/>
    
  </entry>
  
  <entry>
    <title>全排列 II</title>
    <link href="https://abnerwei.com/post/916e8a14"/>
    <id>https://abnerwei.com/post/916e8a14</id>
    <published>2020-09-18T14:50:21.000Z</published>
    <updated>2020-09-18T14:50:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>全排列 II(Permutations II) ⭐️⭐️⭐️</strong></p><blockquote><p><em><strong>LeetCode每日一题 2020.09.18</strong></em></p></blockquote><p>给定一个<strong>可包含重复</strong>数字的序列，返回所有<strong>不重复</strong>的全排列。</p><span id="more"></span><p><strong>Example:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,1,2]</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [1,1,2],</span><br><span class="line">  [1,2,1],</span><br><span class="line">  [2,1,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这道题目与 <code>46.全排列</code>的区别在与给定一个可包含重复数字的序列，要返回所有不重复的全排列。所以这里就涉及到<strong>去重</strong>了。所谓去重，其实就是使用过的元素不能重复选取。</p><p>全排列问题可以将结果看成一组数字的序列，我们需要从左往右依次填入题目给定的 n 个数，每个数只能使用一次(相同数字不同位置不冲突)。那么可以很直接的穷举出所有的可能性，即从左往右每一个位置都依此尝试填入一个数，此题用「回溯+剪枝法」来解决。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">permuteUnique</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="params">(res [][]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">vis := <span class="built_in">make</span>([]<span class="keyword">bool</span>, <span class="built_in">len</span>(nums))</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">sort.Ints(nums)</span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(nums, path []<span class="keyword">int</span>, vis []<span class="keyword">bool</span>)</span></span> </span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(nums, path []<span class="keyword">int</span>, vis []<span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> n == <span class="built_in">len</span>(path) &#123;</span><br><span class="line">            res = <span class="built_in">append</span>(res, <span class="built_in">append</span>([]<span class="keyword">int</span>(<span class="literal">nil</span>), path...))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">            <span class="keyword">if</span> vis[i] &#123; <span class="comment">//该数已经被使用</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i<span class="number">-1</span>] &amp;&amp; vis[i<span class="number">-1</span>] == <span class="literal">false</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            vis[i] = <span class="literal">true</span></span><br><span class="line">            dfs(nums, <span class="built_in">append</span>(path, nums[i]), vis)</span><br><span class="line">            vis[i] = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs(nums, <span class="literal">nil</span>, vis)</span><br><span class="line"><span class="keyword">return</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><ul><li>时间复杂度: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo>×</mo><mi>N</mi><mo stretchy="false">!</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N\times N!)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">!</span><span class="mclose">)</span></span></span></span>，其中 <code>N</code> 为数组的长度。</li><li>空间复杂度: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;全排列 II(Permutations II) ⭐️⭐️⭐️&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;LeetCode每日一题 2020.09.18&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;给定一个&lt;strong&gt;可包含重复&lt;/strong&gt;数字的序列，返回所有&lt;strong&gt;不重复&lt;/strong&gt;的全排列。&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="https://abnerwei.com/categories/leetcode/"/>
    
    
    <category term="backtracking" scheme="https://abnerwei.com/tags/backtracking/"/>
    
  </entry>
  
  <entry>
    <title>反转二叉树</title>
    <link href="https://abnerwei.com/post/bdfac760"/>
    <id>https://abnerwei.com/post/bdfac760</id>
    <published>2020-09-16T13:56:21.000Z</published>
    <updated>2020-09-16T13:56:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Invert Binary Tree ⭐️</strong></p><blockquote><p><em><strong>LeetCode每日一题 2020.09.16</strong></em></p></blockquote><p>翻转一棵二叉树。</p><span id="more"></span><p><strong>Example:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">     4</span><br><span class="line">   /   \</span><br><span class="line">  2     7</span><br><span class="line"> / \   / \</span><br><span class="line">1   3 6   9</span><br><span class="line">Output:</span><br><span class="line">     4</span><br><span class="line">   /   \</span><br><span class="line">  7     2</span><br><span class="line"> / \   / \</span><br><span class="line">9   6 3   1</span><br></pre></td></tr></table></figure><p><strong>Trivia:</strong> 这道题来源于(Homebrew)作者<a href="https://twitter.com/mxcl/status/608682016205344768">原问题</a>启发:</p><blockquote><p>Google: 90% of our engineers use the software you wrote (Homebrew), but you can’t invert a binary tree on a whiteboard so fuck off.</p></blockquote><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>题目简单明了, 如上图所示翻转整个二叉树。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这题是一个很简答的二叉树问题。显然, 我们从二叉树根节点顶部开始, 对树进行递归遍历, 先交换子节点, 再依次翻转叶子节点(从末端叶子节点先开始翻转也可以)。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Left *TreeNode</span></span><br><span class="line"><span class="comment"> *     Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">invertTree</span><span class="params">(root *TreeNode)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    <span class="comment">// 递归的边界条件判断</span></span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 先翻转子节点</span></span><br><span class="line">    root.Left, root.Right = root.Right, root.Left</span><br><span class="line">    <span class="comment">// 递归所有叶子节点</span></span><br><span class="line">    invertTree(root.Left)</span><br><span class="line">    invertTree(root.Right)</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><ul><li>时间复杂度: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>, 其中 n 是二叉树中的节点个数。</li><li>空间复杂度: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>, 当前节点在二叉树中的高度。在平均情况下，二叉树的高度与节点个数为对数关系，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(logN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>。而在最坏情况下，树形成链状，空间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Invert Binary Tree ⭐️&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;LeetCode每日一题 2020.09.16&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;翻转一棵二叉树。&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="https://abnerwei.com/categories/leetcode/"/>
    
    
    <category term="Tree" scheme="https://abnerwei.com/tags/tree/"/>
    
  </entry>
  
  <entry>
    <title>单词搜索</title>
    <link href="https://abnerwei.com/post/d9073a8d"/>
    <id>https://abnerwei.com/post/d9073a8d</id>
    <published>2020-09-13T13:56:21.000Z</published>
    <updated>2020-09-13T13:56:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>单词搜索(Word Search) ⭐️⭐️⭐️</strong></p><blockquote><p><em><strong>LeetCode每日一题 2020.09.13</strong></em></p></blockquote><p>给定一个二维网格和一个单词， 找出该单词是否存在于网格中。</p><p>单词必须按照字母顺序， 通过相邻的单元格内的字母构成， 其中”相邻”单元格是那些水平相邻或垂直相邻的单元格。 同一个单元格内的字母不允许被重复使用。</p><span id="more"></span><p><strong>Example:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">board =</span><br><span class="line">[</span><br><span class="line">  [&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;,&#x27;E&#x27;],</span><br><span class="line">  [&#x27;S&#x27;,&#x27;F&#x27;,&#x27;C&#x27;,&#x27;S&#x27;],</span><br><span class="line">  [&#x27;A&#x27;,&#x27;D&#x27;,&#x27;E&#x27;,&#x27;E&#x27;]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">给定 word = &quot;ABCCED&quot; 返回 true</span><br><span class="line">给定 word = &quot;SEE&quot; 返回 true</span><br><span class="line">给定 word = &quot;ABCB&quot; 返回 false</span><br></pre></td></tr></table></figure><blockquote><p><em><strong>note:</strong></em><br>    1. <code>board</code> 和 <code>word</code> 中只包含大写和小写英文字母.<br>    2. <code>1 &lt;= board.length &lt;= 200</code><br>    3. <code>1 &lt;= board[i].length &lt;= 200</code><br>    4. <code>1 &lt;= word.length &lt;= 10^3</code></p></blockquote><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>按照题目大意需要在给定的<code>board</code>二维数组检索能够组成给定的<code>word</code>的一条路径 </p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>比如单词 <code>&quot;ABCCED&quot;</code>。 首先找到单词开头<code>A</code>，遍历矩阵，找到 <code>A</code>。</li><li>起点可能不止一个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mi>o</mi><mi>a</mi><mi>r</mi><mi>d</mi><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">board(1,1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">o</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mi>o</mi><mi>a</mi><mi>r</mi><mi>d</mi><mo stretchy="false">(</mo><mn>3</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">board(3,1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">o</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，基于其中一个 <code>A</code>， 利用DFS思想能否找出剩下的 “BCCED” 路径。</li><li>下级字符<code>B</code>有四个可选点: 当前<code>A</code>点的上、下、左、右。</li><li>逐个尝试每一种选择，去检索是否符合进而对下一个字符选点，又有四种选择，继续尝试检索。此处利用回溯的思想。</li><li>当发现某个选择四个方向均不符合，结束当前检索，回溯到上一层节点选择其他方向。</li><li>最终为<code>ABCCED</code>找到符合的节点路径<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mi>o</mi><mi>a</mi><mi>r</mi><mi>d</mi><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo><mo>⇀</mo><mi>b</mi><mi>o</mi><mi>a</mi><mi>r</mi><mi>d</mi><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">)</mo><mo>⇀</mo><mi>b</mi><mi>o</mi><mi>a</mi><mi>r</mi><mi>d</mi><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo><mo>⇀</mo><mi>b</mi><mi>o</mi><mi>a</mi><mi>r</mi><mi>d</mi><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo><mo>⇀</mo><mi>b</mi><mi>o</mi><mi>a</mi><mi>r</mi><mi>d</mi><mo stretchy="false">(</mo><mn>3</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo><mo>⇀</mo><mi>b</mi><mi>o</mi><mi>a</mi><mi>r</mi><mi>d</mi><mo stretchy="false">(</mo><mn>3</mn><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">board(1,1)\rightharpoonup board(1,2)\rightharpoonup board(1,3)\rightharpoonup board(2,3)\rightharpoonup board(3,3)\rightharpoonup board(3,2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">o</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇀</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">o</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇀</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">o</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇀</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">o</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇀</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">o</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇀</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">o</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span></li><li>关于判断元素是否使用过，我用了一个二维数组 <code>mark</code> 对使用过的元素做标记。</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> pair <span class="keyword">struct</span>&#123; x, y <span class="keyword">int</span> &#125;</span><br><span class="line"><span class="comment">// 定义上下左右四个行走的方向</span></span><br><span class="line"><span class="keyword">var</span> directions = []pair&#123;&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exist</span><span class="params">(board [][]<span class="keyword">byte</span>, word <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> b_h = <span class="built_in">len</span>(board)</span><br><span class="line">    <span class="keyword">if</span> b_h &lt;= <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> b_w = <span class="built_in">len</span>(board[<span class="number">0</span>])</span><br><span class="line">    marked := <span class="built_in">make</span>([][]<span class="keyword">bool</span>, b_h)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> marked &#123;</span><br><span class="line">marked[i] = <span class="built_in">make</span>([]<span class="keyword">bool</span>, b_w)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">var</span> search <span class="function"><span class="keyword">func</span><span class="params">(startX, startY, k <span class="keyword">int</span>)</span> <span class="title">bool</span></span></span><br><span class="line">search = <span class="function"><span class="keyword">func</span><span class="params">(startX, startY, k <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">        <span class="comment">// 当前字符不匹配</span></span><br><span class="line"><span class="keyword">if</span> board[startX][startY] != word[k] &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 检索完整个字串返回 true</span></span><br><span class="line"><span class="keyword">if</span> k == <span class="built_in">len</span>(word)<span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">        marked[startX][startY] = <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 四个方向均错误时回溯, defer恢复mark中对应的节点为未访问</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; marked[startX][startY] = <span class="literal">false</span> &#125;() </span><br><span class="line"><span class="keyword">for</span> _, dir := <span class="keyword">range</span> directions &#123;</span><br><span class="line">            <span class="comment">// 需要判断节点在边界的情况, 防止越界</span></span><br><span class="line"><span class="keyword">if</span> newX, newY := startX+dir.x, startY+dir.y; <span class="number">0</span> &lt;= newX &amp;&amp; newX &lt; b_h &amp;&amp; <span class="number">0</span> &lt;= newY &amp;&amp; newY &lt; b_w &amp;&amp; !marked[newX][newY] &#123;</span><br><span class="line">                <span class="comment">// 递归查询</span></span><br><span class="line"><span class="keyword">if</span> search(newX, newY, k+<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 按照word检索整个board</span></span><br><span class="line"><span class="keyword">for</span> a, rows := <span class="keyword">range</span> board &#123;</span><br><span class="line"><span class="keyword">for</span> b := <span class="keyword">range</span> rows &#123;</span><br><span class="line"><span class="keyword">if</span> search(a, b, <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><ul><li>时间复杂度: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>M</mi><mi>N</mi><mo>⋅</mo><msup><mn>3</mn><mi>L</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(MN \cdot 3^L)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">L</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，其中 <code>M</code>,<code>N</code> 为网格的长度与宽度，<code>L</code>为字符串<code>word</code>的长度。</li><li>空间复杂度: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>M</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(MN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;单词搜索(Word Search) ⭐️⭐️⭐️&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;LeetCode每日一题 2020.09.13&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;给定一个二维网格和一个单词， 找出该单词是否存在于网格中。&lt;/p&gt;
&lt;p&gt;单词必须按照字母顺序， 通过相邻的单元格内的字母构成， 其中”相邻”单元格是那些水平相邻或垂直相邻的单元格。 同一个单元格内的字母不允许被重复使用。&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="https://abnerwei.com/categories/leetcode/"/>
    
    
    <category term="array" scheme="https://abnerwei.com/tags/array/"/>
    
    <category term="backtracking" scheme="https://abnerwei.com/tags/backtracking/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的层平均值</title>
    <link href="https://abnerwei.com/post/d5a4690d"/>
    <id>https://abnerwei.com/post/d5a4690d</id>
    <published>2020-09-12T14:37:21.000Z</published>
    <updated>2020-09-12T14:37:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Average of Levels in Binary Tree ⭐️</strong></p><blockquote><p><em><strong>LeetCode每日一题 2020.09.12</strong></em></p></blockquote><p>Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.</p><span id="more"></span><p><strong>Example:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line">  9  20</span><br><span class="line">    /  \</span><br><span class="line">   15   7</span><br><span class="line">Output: [3, 14.5, 11]</span><br><span class="line">Explanation:</span><br><span class="line">The average value of nodes on level 0 is 3,  on level 1 is 14.5, and on level 2 is 11. Hence return [3, 14.5, 11].</span><br></pre></td></tr></table></figure><blockquote><p>note: The range of node’s value is in the range of 32-bit signed integer.</p></blockquote><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>按照题目大意需要计算二叉树每层所有节点的平均值, 必然需要遍历整个二叉树节点, 所以自然想到DFS(深度优先检索)和BFS(广度优先检索)两种方式。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="方式一-DFS"><a href="#方式一-DFS" class="headerlink" title="方式一: DFS"></a>方式一: DFS</h3><p>使用深度优先检索算法计算二叉树的层平均值, 首先定义两个数组, 第一个数组(counts)用于存储二叉树的每一层的节点数, 第二个数组(sums)用于存储二叉树的每一层的节点值之和。遍历完整个二叉树之后，第 i 层的平均值即为 sums[i]/counts[i].</p><h3 id="方式二-BFS"><a href="#方式二-BFS" class="headerlink" title="方式二: BFS"></a>方式二: BFS</h3><p>使用广度优先检索算法计算二叉树的层平均值. 用层序遍历的方法, 维护一个队列去遍历节点. 用 for 循环控制一层的节点逐个出列, 节点值累加求和. 节点出列的同时, 下一层的子节点加入队列, 在 for 循环结束时，队列中就全是下一层的节点. 此时当前层的求和也好了, 除以当前层的节点个数, 就是当前层的平均值, 加入结果数组. 接着处理下一层的节点, 重复以上步骤, 就构建好了结果数组.</p><p>广度优先检索算法通过使用队列存储待访问节点, 只要保证在每一轮遍历时, 当前队列中的节点是同一层的所有节.</p><ul><li>第一步, 将根节点加入队列;</li><li>每一轮遍历, 将队列中的所有节点取出, 计算节点的数量以及节点值之和, 同时计算节点的平均值, 然后将节点的全部非空子节点重新加入队列, 直到队列为空, 遍历结束.</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Left *TreeNode</span></span><br><span class="line"><span class="comment"> *     Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> data <span class="keyword">struct</span>&#123;sum, count <span class="keyword">int</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">averageOfLevels</span><span class="params">(root *TreeNode)</span> []<span class="title">float64</span></span> &#123;</span><br><span class="line">    levelsData := []data&#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(node *TreeNode, level <span class="keyword">int</span>)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(node *TreeNode, level <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> level &lt; <span class="built_in">len</span>(levelsData) &#123;</span><br><span class="line">            levelsData[level].sum += node.Val</span><br><span class="line">            levelsData[level].count++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            levelsData = <span class="built_in">append</span>(levelsData, data&#123;node.Val, <span class="number">1</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(node.Left, level+<span class="number">1</span>)</span><br><span class="line">        dfs(node.Right, level+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs(root, <span class="number">0</span>)</span><br><span class="line">    averages := <span class="built_in">make</span>([]<span class="keyword">float64</span>, <span class="built_in">len</span>(levelsData))</span><br><span class="line"><span class="keyword">for</span> i, d := <span class="keyword">range</span> levelsData &#123;</span><br><span class="line">averages[i] = <span class="keyword">float64</span>(d.sum) / <span class="keyword">float64</span>(d.count)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> averages</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Left *TreeNode</span></span><br><span class="line"><span class="comment"> *     Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">averageOfLevels</span><span class="params">(root *TreeNode)</span> <span class="params">(averages []<span class="keyword">float64</span>)</span></span> &#123;</span><br><span class="line">nextLevel := []*TreeNode&#123;root&#125;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span>(nextLevel) &gt; <span class="number">0</span> &#123;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line">curLevel := nextLevel</span><br><span class="line">nextLevel = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">for</span> _, node := <span class="keyword">range</span> curLevel &#123;</span><br><span class="line">sum += node.Val</span><br><span class="line"><span class="keyword">if</span> node.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">nextLevel = <span class="built_in">append</span>(nextLevel, node.Left)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> node.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">nextLevel = <span class="built_in">append</span>(nextLevel, node.Right)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">averages = <span class="built_in">append</span>(averages, <span class="keyword">float64</span>(sum)/<span class="keyword">float64</span>(<span class="built_in">len</span>(curLevel)))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><ul><li>时间复杂度: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>, 其中 n 是二叉树中的节点个数。</li><li>空间复杂度: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>, 其中 n 是二叉树中的节点个数。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Average of Levels in Binary Tree ⭐️&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;LeetCode每日一题 2020.09.12&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="https://abnerwei.com/categories/leetcode/"/>
    
    
    <category term="Tree" scheme="https://abnerwei.com/tags/tree/"/>
    
  </entry>
  
  <entry>
    <title>缓存算法 --- LRU算法</title>
    <link href="https://abnerwei.com/post/b23e07bf"/>
    <id>https://abnerwei.com/post/b23e07bf</id>
    <published>2019-11-18T04:10:21.000Z</published>
    <updated>2019-11-18T04:10:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>Redis的性能优越，应用普遍，可以存储的键值个数大到上亿条记录，依然保持较高的效率。作为一个内存数据库，Redis内部采用了字典（哈希表）的数据结构实现了键值对的存储。但是长期将Redis作为缓存使用，难免会遇到内存空间存储瓶颈，当Redis内存超出物理内存限制时，内存数据就会与磁盘产生频繁交换，使Redis性能急剧下降。此时如何淘汰无用数据释放空间?</p><span id="more"></span><p>LRU（Least recently used;最近最少使用）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是 “如果一个数据在最近一段时间内使用次数很少，那么在将来一段时间内被使用的可能性也很小”。</p><blockquote><p>注意LFU和LRU算法的不同之处，LRU的淘汰规则是基于访问时间，而LFU是基于访问次数的。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/abnerwei/cdn/images/redis/fifo-lru.jpeg" alt="fifo-lru"></p><ul><li>新增数据插入到哈希链表头部；</li><li>每当缓存命中（即缓存数据被再次访问到），则将数据重新移到链表头部；</li><li>当哈希链表存储满的时候，将链表尾部的数据丢弃；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/abnerwei/cdn/images/redis/lru.gif" alt="lru-gif"></p><ol><li>最开始时，内存空间富余，数据A、B、C依次存储</li><li>当加入D时，内存空间不够了，因此根据LRU算法，内存空间中A待的时间最为久远，选择A，将其淘汰，此时B处于顶部</li><li>当再次访问B时，内存空间中的B又处于活跃状态，而C则变成了内存空间中，近段时间最久未使用的</li><li>当再次向内存空间加入E时，这时内存空间又不足了，选择在内存空间中待的最久的C将其淘汰出内存，这时的内存空间存放的对象就是E-&gt;B-&gt;D</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。</span><br><span class="line"></span><br><span class="line">获取数据 get(key) - 如果密钥 (key) 存在于缓存中，则获取密钥的值（总是正数），否则返回 -1。</span><br><span class="line">写入数据 put(key, value) - 如果密钥不存在，则写入其数据值。当缓存容量达到上限时，它应该在写入新数据之前删除最近最少使用的数据值，从而为新的数据值留出空间。</span><br><span class="line"></span><br><span class="line">进阶:</span><br><span class="line"></span><br><span class="line">你是否可以在 O(1) 时间复杂度内完成这两种操作？</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line"></span><br><span class="line">LRUCache cache = new LRUCache( 2 /* 缓存容量 );</span><br><span class="line"></span><br><span class="line">cache.put(1, 1);</span><br><span class="line">cache.put(2, 2);</span><br><span class="line">cache.get(1);       // 返回  1</span><br><span class="line">cache.put(3, 3);    // 该操作会使得密钥 2 作废</span><br><span class="line">cache.get(2);       // 返回 -1 (未找到)</span><br><span class="line">cache.put(4, 4);    // 该操作会使得密钥 1 作废</span><br><span class="line">cache.get(1);       // 返回 -1 (未找到)</span><br><span class="line">cache.get(3);       // 返回  3</span><br><span class="line">cache.get(4);       // 返回  4</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Node <span class="keyword">struct</span> &#123;</span><br><span class="line">    Key <span class="keyword">int</span></span><br><span class="line">    Value <span class="keyword">int</span></span><br><span class="line">    pre *Node</span><br><span class="line">    next *Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LRUCache <span class="keyword">struct</span> &#123;</span><br><span class="line">    limit <span class="keyword">int</span></span><br><span class="line">    HashMap <span class="keyword">map</span>[<span class="keyword">int</span>]*Node</span><br><span class="line">    head *Node</span><br><span class="line">    end *Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">(capacity <span class="keyword">int</span>)</span> <span class="title">LRUCache</span></span>&#123;</span><br><span class="line">    lruCache := LRUCache&#123;limit:capacity&#125;</span><br><span class="line">    lruCache.HashMap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]*Node, capacity)</span><br><span class="line">    <span class="keyword">return</span> lruCache</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LRUCache)</span> <span class="title">Get</span><span class="params">(key <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> v,ok:= l.HashMap[key];ok &#123;</span><br><span class="line">        l.refreshNode(v)</span><br><span class="line">        <span class="keyword">return</span> v.Value</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LRUCache)</span> <span class="title">Put</span><span class="params">(key <span class="keyword">int</span>, value <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> v,ok := l.HashMap[key];!ok&#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(l.HashMap) &gt;= l.limit&#123;</span><br><span class="line">            oldKey := l.removeNode(l.head)</span><br><span class="line">            <span class="built_in">delete</span>(l.HashMap, oldKey)</span><br><span class="line">        &#125;</span><br><span class="line">        node := Node&#123;Key:key, Value:value&#125;</span><br><span class="line">        l.addNode(&amp;node)</span><br><span class="line">        l.HashMap[key] = &amp;node</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        v.Value = value</span><br><span class="line">        l.refreshNode(v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LRUCache)</span> <span class="title">refreshNode</span><span class="params">(node *Node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> node == l.end &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    l.removeNode(node)</span><br><span class="line">    l.addNode(node)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LRUCache)</span> <span class="title">removeNode</span><span class="params">(node *Node)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> node == l.end  &#123;</span><br><span class="line">        l.end = l.end.pre</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> node == l.head &#123;</span><br><span class="line">        l.head = l.head.next</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        node.pre.next = node.next</span><br><span class="line">        node.next.pre = node.pre</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node.Key</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LRUCache)</span> <span class="title">addNode</span><span class="params">(node *Node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> l.end != <span class="literal">nil</span> &#123;</span><br><span class="line">        l.end.next = node</span><br><span class="line">        node.pre = l.end</span><br><span class="line">        node.next = <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    l.end = node</span><br><span class="line">    <span class="keyword">if</span> l.head == <span class="literal">nil</span> &#123;</span><br><span class="line">        l.head = node</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Redis的性能优越，应用普遍，可以存储的键值个数大到上亿条记录，依然保持较高的效率。作为一个内存数据库，Redis内部采用了字典（哈希表）的数据结构实现了键值对的存储。但是长期将Redis作为缓存使用，难免会遇到内存空间存储瓶颈，当Redis内存超出物理内存限制时，内存数据就会与磁盘产生频繁交换，使Redis性能急剧下降。此时如何淘汰无用数据释放空间?&lt;/p&gt;</summary>
    
    
    
    <category term="redis" scheme="https://abnerwei.com/categories/redis/"/>
    
    
    <category term="redis" scheme="https://abnerwei.com/tags/redis/"/>
    
    <category term="algorithms" scheme="https://abnerwei.com/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>回文数</title>
    <link href="https://abnerwei.com/post/df58b0a0"/>
    <id>https://abnerwei.com/post/df58b0a0</id>
    <published>2019-11-11T06:54:21.000Z</published>
    <updated>2019-11-11T06:54:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Palindrome Number</strong><br>Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.</p><span id="more"></span><p><strong>Example 1:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="number">121</span></span><br><span class="line">Output: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="number">-121</span></span><br><span class="line">Output: <span class="literal">false</span></span><br><span class="line">Explanation: From left to right, it reads <span class="number">-121.</span> From right to left, it becomes <span class="number">121</span>-. Therefore it is <span class="keyword">not</span> a palindrome.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="number">10</span></span><br><span class="line">Output: <span class="literal">false</span></span><br><span class="line">Explanation: Reads <span class="number">01</span> from right to left. Therefore it is <span class="keyword">not</span> a palindrome.</span><br></pre></td></tr></table></figure><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><ul><li>给定一个整数，即会出现正数与负数</li><li>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2>根据上述对于回文数的定义，可以将数字进行反转，如果反转后的数字与原数字相同即可确定为回文数，这里会有一个问题，反转后的数字可能会大于 <code>math.MaxInt32</code>，导致溢出。</li></ul><p>这里转换一种思路，32位整型取值范围为 -2147483648 ~ 2147483647，可以对给定的整数的一半数字进行翻转，与另一半进行比较，二者相同即可判定为回文数，同时解决了可能溢出的问题。</p><blockquote><p>如给定 <code>1452541</code>，我们可以看到数字长度为奇数，所以对 <strong>541</strong> 进行翻转，得到 <strong>145</strong> ，与整数另一半相同，判定为回文数</p></blockquote><blockquote><p>一种临界情况即给定数字为负数，因为包含 <strong>-</strong> 号，翻转后 <code>-121 -&gt; 121-</code>；另一种临界情况为，给定的整数最后一位为 <strong>0</strong>，除 <strong>0</strong> 以外的任意整数都不满足，确定不是回文数，所以对于负数统一返回 <code>false</code></p></blockquote><blockquote><p>处理方式我们和<a href="/post/beef66dc" title="整数反转">整数反转</a>中使用的方式类似</p></blockquote><p>Q: 我们如何知道反转数字的位数已经达到原始数字位数的一半？</p><p>A: 我们将原始数字除以 10，然后给反转后的数字乘上 10，所以，当原始数字小于反转后的数字时，就意味着我们已经处理了一半位数的数字。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPalindrome</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="comment">// 1.当 x &lt; 0 时，x 不是回文数</span></span><br><span class="line">    <span class="comment">// 2.数字的最后一位是 0, 为了使该数字为回文, 只有 0 满足这一属性</span></span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span> || (x % <span class="number">10</span> == <span class="number">0</span> &amp;&amp; x != <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rev := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x &gt; rev &#123;</span><br><span class="line">        rev = rev * <span class="number">10</span> + x % <span class="number">10</span></span><br><span class="line">        x /= <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x == rev || x == rev/<span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>10</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log_{10}(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span><br>空间复杂度：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Palindrome Number&lt;/strong&gt;&lt;br&gt;Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="https://abnerwei.com/categories/leetcode/"/>
    
    
    <category term="math" scheme="https://abnerwei.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>整数反转</title>
    <link href="https://abnerwei.com/post/beef66dc"/>
    <id>https://abnerwei.com/post/beef66dc</id>
    <published>2019-11-08T06:35:21.000Z</published>
    <updated>2019-11-08T06:35:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Reverse Integer</strong><br>Given a 32-bit signed integer, reverse digits of an integer.</p><span id="more"></span><p><strong>Example 1:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="number">123</span></span><br><span class="line">Output: <span class="number">321</span></span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="number">-123</span></span><br><span class="line">Output: <span class="number">-321</span></span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="number">120</span></span><br><span class="line">Output: <span class="number">21</span></span><br></pre></td></tr></table></figure><blockquote><p>Note: Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup><mo separator="true">,</mo><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[-2^{31},2^{31}-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p></blockquote><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>对于提供的32位有符号整型数字按位反转得到另一组整型。需要注意的两点：</p><ul><li><p>有符号，即会有负数</p></li><li><p>按位反转后，可能会超出32位整型的范围，导致溢出，这里需要做处理</p><blockquote><p>32位整型取值范围：-2147483648 ~ 2147483647</p></blockquote></li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>Tag:数学</p><ul><li>通过循环将数字 <em>x</em> 按位拆分，在计算新值时判断是否溢出</li><li>溢出条件有两个：<ul><li>一个是大于整数最大值 <code>math.MaxInt32</code></li><li>一个是小于整数最小值 <code>math.MinInt32</code></li></ul></li><li>定义计算结果为 <code>rev</code>，下一位为 <code>pop</code><ul><li>从 <code>rev * 10 + pop &gt; math.MaxInt32</code>这个条件来看<ul><li>当出现 <code>rev &gt; math.MaxInt32 / 10</code> 且 还有 <code>pop</code> 需要添加时，则一定溢出</li><li>当出现 <code>ans == math.MaxInt32 / 10</code> 且 <code>pop &gt; 7</code> 时，则一定溢出，<code>7</code>是 <code>2^31 - 1</code>的个位数</li></ul></li><li>从 <code>rev * 10 + pop &lt; math.MinInt32</code> 这个条件来看<ul><li>当出现 <code>rev &lt; math.MinInt32 / 10</code> 且 还有 <code>pop</code> 需要添加时，则一定溢出</li><li>当出现 <code>rev == math.MinInt32 / 10</code> 且 <code>pop &lt; -8</code> 时，则一定溢出，<code>8</code> 是<code>-2^31</code>的个位数</li></ul></li></ul></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    rev := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x!=<span class="number">0</span> &#123;</span><br><span class="line">        pop := x%<span class="number">10</span></span><br><span class="line">        x /= <span class="number">10</span></span><br><span class="line">        <span class="keyword">if</span> (rev &gt; math.MaxInt32/<span class="number">10</span> || (rev == math.MaxInt32 / <span class="number">10</span> &amp;&amp; pop &gt; <span class="number">7</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rev &lt; math.MinInt32/<span class="number">10</span> || (rev == math.MinInt32 / <span class="number">10</span> &amp;&amp; pop &lt; <span class="number">-8</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// https://play.golang.org/p/4UilqCA9nQM</span></span><br><span class="line">      <span class="comment">// rev*10 在32位下会发生溢出, 所以预先判断</span></span><br><span class="line">        rev = rev * <span class="number">10</span> + pop</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rev</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Reverse Integer&lt;/strong&gt;&lt;br&gt;Given a 32-bit signed integer, reverse digits of an integer.&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="https://abnerwei.com/categories/leetcode/"/>
    
    
    <category term="math" scheme="https://abnerwei.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>最长回文子串</title>
    <link href="https://abnerwei.com/post/13c31df7"/>
    <id>https://abnerwei.com/post/13c31df7</id>
    <published>2019-11-05T14:12:21.000Z</published>
    <updated>2019-11-05T14:12:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Longest Palindromic Substring</strong></p><p>Given a string <strong>s</strong>, find the longest palindromic substring in <strong>s</strong>. You may assume that the maximum length of <strong>s</strong> is 1000.</p><span id="more"></span><p><strong>Example 1:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="string">&quot;babad&quot;</span></span><br><span class="line">Output: <span class="string">&quot;bab&quot;</span></span><br><span class="line">Note: <span class="string">&quot;aba&quot;</span> is also a valid answer.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="string">&quot;cbbd&quot;</span></span><br><span class="line">Output: <span class="string">&quot;bb&quot;</span></span><br></pre></td></tr></table></figure><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>根据回文子串的定义，枚举所有长度大于等于 <strong>2</strong> 的子串，依次判断它们是否是回文。在具体实现时，可以只针对大于 “当前得到的最长回文子串长度” 的子串进行 “回文验证”，例如以上例子中的<strong>aba</strong>、<strong>bab</strong>，而<strong>abc</strong>显然不是。</p><h2 id="解题思路-amp-代码"><a href="#解题思路-amp-代码" class="headerlink" title="解题思路&amp;代码"></a>解题思路&amp;代码</h2><h3 id="方法一：暴力"><a href="#方法一：暴力" class="headerlink" title="方法一：暴力"></a>方法一：暴力</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestPalindrome</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> strLen, maxLen <span class="keyword">int</span> = <span class="built_in">len</span>([]<span class="keyword">rune</span>(s)), <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> strLen &lt; <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> resStr = s[:<span class="number">1</span>]</span><br><span class="line">    <span class="comment">// 枚举所有长度&gt;=2的子串</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; strLen - <span class="number">1</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; strLen; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> j - i + <span class="number">1</span> &gt; maxLen &amp;&amp; isValid(s, i, j) &#123;</span><br><span class="line">                maxLen = j - i + <span class="number">1</span></span><br><span class="line">                resStr = s[i:j + <span class="number">1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resStr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValid</span><span class="params">(s <span class="keyword">string</span>, left, right <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> left &lt; right &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[left] != s[right]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        left++</span><br><span class="line">        right--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li>时间复杂度：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，两层 for 循环 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，for 循环里边判断是否为回文 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，所以时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li><li>空间复杂度：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，只使用到常数个临时变量，与字符串长度无关。</li></ul><h4 id="考虑使用双指针和滑动窗口解决"><a href="#考虑使用双指针和滑动窗口解决" class="headerlink" title="考虑使用双指针和滑动窗口解决"></a>考虑使用双指针和滑动窗口解决</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestPalindrome</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(s) &lt; <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    &#125;</span><br><span class="line">    longest := s[<span class="number">0</span>:<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">        <span class="comment">// Step为2</span></span><br><span class="line">        <span class="keyword">for</span> rightStep := <span class="number">0</span>; rightStep &lt; <span class="number">2</span>; rightStep++ &#123;</span><br><span class="line">            <span class="comment">// 索引位置两侧元素必须相等</span></span><br><span class="line">            <span class="keyword">for</span> p, q := i<span class="number">-1</span>, i+rightStep; p &gt;= <span class="number">0</span> &amp;&amp; q &lt; <span class="built_in">len</span>(s) &amp;&amp; s[p] == s[q]; &#123;</span><br><span class="line">                <span class="keyword">if</span> q-p+<span class="number">1</span> &gt; <span class="built_in">len</span>(longest) &#123;</span><br><span class="line">                    longest = s[p : q+<span class="number">1</span>]</span><br><span class="line">                &#125;</span><br><span class="line">               <span class="comment">// 由i位置开始向两侧扩散 </span></span><br><span class="line">                p--</span><br><span class="line">                q++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> longest</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法二：中心扩散"><a href="#方法二：中心扩散" class="headerlink" title="方法二：中心扩散"></a>方法二：中心扩散</h3><p>暴力法是采用双指针两边扫描，验证是否是回文子串，时间复杂度比较高。另一种思路是枚举可能出现的回文子串的 “中心位置”，从 “中心位置” 尝试尽可能扩散出去，得到一个回文子串。</p><p>因此，中心扩散法的思路是：遍历每一个索引，以这个索引为中心，利用 “回文串” 中心对称的特点，往两边扩散，直到无重复子串为止。</p><p>枚举 “中心位置” 时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，从 “中心位置” 扩散得到 “回文子串” 的时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，因此时间复杂度可以降到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</p><p>在这里要关注一个细节：回文串在长度为<strong>奇数</strong>和<strong>偶数</strong>的时候，”回文中心” 的形式是不一样的。</p><ul><li>奇数回文串的 “中心” 是一个具体的字符，例如：回文串 <code>&quot;aba&quot;</code> 的中心是字符 <code>&quot;a&quot;</code>；</li><li>偶数回文串的 “中心” 是位于中间的两个字符的 “空隙”，例如：回文串串 <code>&quot;abba&quot;</code> 的中心是两个 <code>&quot;b&quot;</code> 中间。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/abnerwei/cdn/images/leetcode/palindromic_1.jpg" alt="palindromic_1"></p><p>所有可能的回文串位置如下：</p><p><img src="https://cdn.jsdelivr.net/gh/abnerwei/cdn/images/leetcode/palindromic_2.jpg" alt="palindromic_2"></p><ul><li>如果回文串中心为索引编码，向外围扩散，则得到的回文串的长度为奇数</li><li>如果回文串中心为相邻的索引编码，向外围扩散，则得到的回文串的长度为偶数</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestPalindrome</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> strLen, maxLen <span class="keyword">int</span> = <span class="built_in">len</span>([]<span class="keyword">rune</span>(s)), <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> strLen &lt; <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> resStr <span class="keyword">string</span> = s[:<span class="number">1</span>]</span><br><span class="line">    <span class="comment">// 枚举所有长度&gt;=2的子串</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; strLen - <span class="number">1</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">var</span> oddStr, evenStr, maxLenStr = centerSpread(s, i, i),centerSpread(s, i, i+<span class="number">1</span>), <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>([]<span class="keyword">rune</span>(oddStr)) &gt; <span class="built_in">len</span>([]<span class="keyword">rune</span>(evenStr)) &#123;</span><br><span class="line">            maxLenStr = oddStr</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            maxLenStr = evenStr</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">len</span>([]<span class="keyword">rune</span>(maxLenStr)) &gt; maxLen) &#123;</span><br><span class="line">            maxLen = <span class="built_in">len</span>([]<span class="keyword">rune</span>(maxLenStr))</span><br><span class="line">            resStr = maxLenStr</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resStr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">centerSpread</span><span class="params">(s <span class="keyword">string</span>, left, right <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="comment">// left = right 的时候, 此时回文中心是一个空隙, 回文串的长度是奇数</span></span><br><span class="line">    <span class="comment">// right = left + 1 的时候, 此时回文中心是任意一个字符, 回文串的长度是偶数</span></span><br><span class="line">    <span class="keyword">var</span> strLen = <span class="built_in">len</span>([]<span class="keyword">rune</span>(s))</span><br><span class="line">    <span class="keyword">for</span> left &gt;= <span class="number">0</span> &amp;&amp; right &lt; strLen &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[left] == s[right]) &#123;</span><br><span class="line">            left--</span><br><span class="line">            right++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s[left+<span class="number">1</span>: right]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li>时间复杂度：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^{2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，理由已经叙述。</li><li>空间复杂度：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，只使用到常数个临时变量，与字符串长度无关。</li></ul><h3 id="方法三：Manacher-算法"><a href="#方法三：Manacher-算法" class="headerlink" title="方法三：Manacher 算法"></a>方法三：Manacher 算法</h3><p>在方法二中时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^{2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，对于较长的字符串是难以接受的。</p><p><a href="#%E6%96%B9%E6%B3%95%E4%BA%8C%EF%BC%9A%E4%B8%AD%E5%BF%83%E6%89%A9%E6%95%A3"><strong>方法二</strong></a>存在的缺陷：</p><p><strong>缺陷1</strong></p><ul><li>由于回文串长度的奇偶性造成了不同性质的对称轴位置，<strong>方法2</strong>要对两种情况分别处理；</li><li>很多子串被重复多次访问，造成较差的时间效率。</li></ul><p><strong>缺陷2</strong></p><p>可以通过这个直观体现：</p><table><thead><tr><th align="center">char</th><th align="center">a</th><th align="center">b</th><th align="center">a</th><th align="center">b</th><th align="center">a</th></tr></thead><tbody><tr><td align="center"><strong>i</strong></td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td></tr></tbody></table><p>当<code>i==1</code>，和<code>i==2</code>时，左边的子串aba分别被遍历了一次。</p><p>以下使用 <code>Manacher</code> （马拉车）算法解决上述问题：</p><h4 id="解决长度奇偶性带来的对称轴位置问题"><a href="#解决长度奇偶性带来的对称轴位置问题" class="headerlink" title="解决长度奇偶性带来的对称轴位置问题"></a>解决长度奇偶性带来的对称轴位置问题</h4><p><code>Manacher</code> 算法首先对字符串做一个预处理，在所有的空隙位置(包括首尾)插入同样的符号，要求这个符号是不会在原串中出现的。这样会使得所有的串都是奇数长度的。以插入<code>*</code>号为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aba  ---&gt;  *a*b*a*</span><br><span class="line">abba ---&gt;  *a*b*b*a*</span><br></pre></td></tr></table></figure><p>插入的是同样的符号，且符号不存在于原串，因此子串的回文性不受影响。 原来是回文的串，插完之后还是回文的，原来不是回文的，不受影响。</p><blockquote><p>这一处与<a href="/post/dd568163" title="寻找两个有序数组的中位数">寻找两个有序数组的中位数</a>中使用的方式类似</p></blockquote><h4 id="解决重复遍历的问题"><a href="#解决重复遍历的问题" class="headerlink" title="解决重复遍历的问题"></a>解决重复遍历的问题</h4><p>把一个回文串中最左或最右位置的字符与其对称轴的距离称为回文半径。<code>Manacher</code> 算法中定义了一个回文半径数组<code>RL</code>，用 <code>RL[i]</code> 表示以第 <strong>i</strong> 个字符为对称轴的回文串的回文半径。对字符串从左往右处理，因此这里定义 <code>RL[i]</code>为第 <code>i</code> 个字符为对称轴的回文串的最右一个字符与字符 <code>i</code> 的距离。对于上面插入分隔符之后的两个串，可以得到 RL数组：</p><table><thead><tr><th align="center">char</th><th align="center">*</th><th align="center">a</th><th align="center">*</th><th align="center">b</th><th align="center">*</th><th align="center">a</th><th align="center">*</th></tr></thead><tbody><tr><td align="center"><strong>i</strong></td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td></tr><tr><td align="center"><strong>RL</strong></td><td align="center">1</td><td align="center">2</td><td align="center">1</td><td align="center">4</td><td align="center">1</td><td align="center">2</td><td align="center">1</td></tr><tr><td align="center"><strong>RL-1</strong></td><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">3</td><td align="center">0</td><td align="center">1</td><td align="center">0</td></tr></tbody></table><table><thead><tr><th align="center">char</th><th align="center">*</th><th align="center">a</th><th align="center">*</th><th align="center">b</th><th align="center">*</th><th align="center">b</th><th align="center">*</th><th align="center">a</th><th align="center">*</th></tr></thead><tbody><tr><td align="center"><strong>i</strong></td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">7</td><td align="center">8</td></tr><tr><td align="center"><strong>RL</strong></td><td align="center">1</td><td align="center">2</td><td align="center">1</td><td align="center">2</td><td align="center">5</td><td align="center">2</td><td align="center">1</td><td align="center">2</td><td align="center">1</td></tr><tr><td align="center"><strong>RL-1</strong></td><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">1</td><td align="center">4</td><td align="center">1</td><td align="center">0</td><td align="center">1</td><td align="center">0</td></tr></tbody></table><p>观察可以发现，<code>RL[i]-1</code>的值，正是在原本那个没有插入过分隔符的子串中，以位置 <code>i</code> 为对称轴的最长回文串的长度。那么只要我们求出了RL数组，就能得到最长回文子串的长度。</p><blockquote><p>基本思路是利用<strong>回文串的对称性，扩展回文串</strong>。</p></blockquote><p>首先从左往右依次计算 <code>Len[i]</code>，当计算 <code>Len[i]</code>时，<code>Len[j](0&lt;=j&lt;i)</code>已经计算完毕。设 <code>P</code> 为之前计算中最长回文子串的右端点的最大值，并且设取得这个最大值的位置为 <code>Po</code>，分两种情况：</p><p><strong>第一种情况：<code>i&lt;=P</code></strong></p><p>那么找到 <code>i</code> 相对于<code>P0</code>的对称位置，设为 <code>j</code>，那么如果 <code>Len[j]&lt;P-i</code>，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/abnerwei/cdn/images/leetcode/pdlindromic_3.jpg" alt="palindromic_3"></p><p>以 <code>j</code> 为中心的回文串一定在以 <code>Po</code> 为中心的回文串的内部，且 <code>j</code> 和 <code>i</code> 关于位置 <code>Po</code> 对称，由回文串的定义可知，一个回文串反过来还是一个回文串，所以以 <code>i</code> 为中心的回文串的长度至少和以 <code>j</code> 为中心的回文串一样，即<code>Len[i]&gt;=Len[j]</code>。因为<code>Len[j]&lt;P-i</code>,所以说<code>i+Len[j]&lt;P</code>。由对称性可知<code>Len[i]=Len[j]</code>。</p><p>如果 <code>Len[j]&gt;=P-i</code>,由对称性，说明以 <code>i</code> 为中心的回文串可能会延伸到 <code>P</code> 之外，而大于 <code>P</code> 的部分我们还没有进行检索，所以要从 <code>P+1</code> 位置开始逐一进行匹配，直到发生失配，更新 <code>P</code> 和对应的 <code>Po</code> 以及 <code>Len[i]</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/abnerwei/cdn/images/leetcode/pdlindromic_4.jpg" alt="palindromic_4"></p><p><strong>第二种情况: <code>i&gt;P</code></strong></p><p>如果<code>i</code>比<code>P</code>还要大，说明对于中点为<code>i</code>的回文串还没有匹配到，逐一匹配后更新<code>P</code>的位置和对应的<code>Po</code>以及<code>Len[i]</code>。</p><h4 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li>时间复杂度：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，这里 n 是原始字符串的长度。新字符串的长度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，不计系数与常数项，因此时间复杂度仍为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</li><li>空间复杂度：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestPalindrome</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> strLen, maxLen <span class="keyword">int</span> = <span class="built_in">len</span>([]<span class="keyword">rune</span>(s)), <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> strLen &lt; <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> strNew <span class="keyword">string</span> = addBoundaries(s, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> start <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">var</span> lenNew = <span class="number">2</span> * strLen + <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; lenNew; i++ &#123;</span><br><span class="line">        <span class="keyword">var</span> curLen = centerSpread(strNew, i)</span><br><span class="line">        <span class="keyword">if</span> curLen &gt; maxLen &#123;</span><br><span class="line">            maxLen = curLen</span><br><span class="line">            start = (i - maxLen) / <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s[start: start + maxLen]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">centerSpread</span><span class="params">(s <span class="keyword">string</span>, center <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> strLen = <span class="built_in">len</span>([]<span class="keyword">rune</span>(s))</span><br><span class="line">    <span class="keyword">var</span> i, j, step = center - <span class="number">1</span>, center + <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i &gt;= <span class="number">0</span> &amp;&amp; j &lt; strLen &amp;&amp; s[i] == s[j] &#123;</span><br><span class="line">        i--</span><br><span class="line">        j++</span><br><span class="line">        step++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> step</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理字串 &quot;*a*b*a*&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addBoundaries</span><span class="params">(s <span class="keyword">string</span>, divide <span class="keyword">byte</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> strLen = <span class="built_in">len</span>([]<span class="keyword">rune</span>(s))</span><br><span class="line">    <span class="keyword">if</span> (strLen == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (strings.IndexByte(s, divide) != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">&quot;divide char is exist in `s`&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line">    <span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">0</span>; i &lt; strLen; i++ &#123;</span><br><span class="line">        buf.WriteByte(divide)</span><br><span class="line">        buf.WriteByte(s[i])</span><br><span class="line">    &#125;</span><br><span class="line">    buf.WriteByte(divide)</span><br><span class="line">    <span class="keyword">return</span> buf.String()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法四：动态规划"><a href="#方法四：动态规划" class="headerlink" title="方法四：动态规划"></a>方法四：动态规划</h3><p>1、定义 “状态”；<br>2、找到 “状态转移方程”。</p><blockquote><p>下文中，使用记号 S[l, r] 表示原始字符串的一个子串，l、r 分别是区间的左右边界的索引值，如 S 为 ‘ababa’ 时，S[0, 1] = ‘ab’ ，S[2, 4] = ‘aba’。</p></blockquote><h4 id="定义-“状态”"><a href="#定义-“状态”" class="headerlink" title="定义 “状态”"></a>定义 “状态”</h4><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mrow><mi>l</mi><mo separator="true">,</mo><mi>r</mi></mrow></msub></mrow><annotation encoding="application/x-tex">dp_{l,r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>表示子串 `S[l, r]`是否构成回文串<h4 id="找到-“状态转移方程”"><a href="#找到-“状态转移方程”" class="headerlink" title="找到 “状态转移方程”"></a>找到 “状态转移方程”</h4><p>首先，我们很清楚一个事实：</p><ul><li><p>1、当子串只包含 1 个字符，那么它一定是回文子串；</p></li><li><p>2、当子串包含 2 个以上字符的时候：如果 <code>S[l, r]</code> 是一个回文串，例如 “ababa”，那么 <code>S[l + 1, r - 1]</code> 也一定是回文串，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mrow><mi>l</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>r</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>=</mo><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">dp_{l+1,r-1} = true</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span></span></span></span></p></li></ul><p>定义 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mrow><mi>l</mi><mo separator="true">,</mo><mi>r</mi></mrow></msub></mrow><annotation encoding="application/x-tex">dp_{l,r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>。</p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mrow><mi>l</mi><mo separator="true">,</mo><mi>r</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>S[l,r]是回文串</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mi>a</mi><mi>l</mi><mi>s</mi><mi>e</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>S[l,r]不是回文串</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">dp_{l,r}=\begin{cases}true&amp; \text{S[l,r]是回文串}\\\\false&amp; \text{S[l,r]不是回文串}\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.32em;vertical-align:-1.9100000000000001em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.20499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.2950099999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.30501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9099999999999997em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">S[l,r]</span><span class="mord cjk_fallback">是回文串</span></span></span></span><span style="top:-1.5299999999999998em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">S[l,r]</span><span class="mord cjk_fallback">不是回文串</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9100000000000001em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><p>所以如果 <code>S[l] != S[r]</code>，那么这个子串就一定不是回文串。如果 <code>S[l] == S[r]</code> 成立，就接着判断 <code>S[l + 1]</code> 与 <code>S[r - 1]</code>。</p><p>总结以上，只要 <code>S[l + 1, r - 1]</code> 至少包含两个元素，就继续做判断，否则直接根据左右边界是否相等就能得到原字符串的回文性。如果一个字符串的左右边界相等，以下二者之一成立即可：</p><ul><li>1、去掉左右边界以后的字符串不构成区间，即”<code>S[l + 1, r - 1]</code> 至少包含两个元素”的反面，即 <code>l - r &gt;= -2</code>，或者 <code>r - l &lt;= 2</code>；</li><li>2、去掉左右边界以后的字符串是回文串。</li></ul><p>于是如下”状态转移方程”成立：</p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mrow><mi>l</mi><mo separator="true">,</mo><mi>r</mi></mrow></msub><mo>=</mo><mi>S</mi><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo><mo>=</mo><mo>=</mo><mi>S</mi><mo stretchy="false">[</mo><mi>r</mi><mo stretchy="false">]</mo><mo>∧</mo><mo stretchy="false">(</mo><mi>l</mi><mo>−</mo><mi>r</mi><mo>&gt;</mo><mo>=</mo><mo>−</mo><mn>2</mn><mo>∨</mo><mi>d</mi><msub><mi>p</mi><mrow><mi>l</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>r</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp_{l,r} = S[l] == S[r] ∧ (l - r &gt;= -2 ∨ dp_{l + 1, r - 1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><p>或者</p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mrow><mi>l</mi><mo separator="true">,</mo><mi>r</mi></mrow></msub><mo>=</mo><mi>S</mi><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo><mo>=</mo><mo>=</mo><mi>S</mi><mo stretchy="false">[</mo><mi>r</mi><mo stretchy="false">]</mo><mo>∧</mo><mo stretchy="false">(</mo><mi>r</mi><mo>−</mo><mi>l</mi><mo>&lt;</mo><mo>=</mo><mn>2</mn><mo>∨</mo><mi>d</mi><msub><mi>p</mi><mrow><mi>l</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>r</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp_{l,r} = S[l] == S[r] ∧ (r - l &lt;= 2 ∨ dp_{l + 1, r - 1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Longest Palindromic Substring&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given a string &lt;strong&gt;s&lt;/strong&gt;, find the longest palindromic substring in &lt;strong&gt;s&lt;/strong&gt;. You may assume that the maximum length of &lt;strong&gt;s&lt;/strong&gt; is 1000.&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="https://abnerwei.com/categories/leetcode/"/>
    
    
    <category term="string" scheme="https://abnerwei.com/tags/string/"/>
    
    <category term="dynamic-programming" scheme="https://abnerwei.com/tags/dynamic-programming/"/>
    
  </entry>
  
  <entry>
    <title>寻找两个有序数组的中位数</title>
    <link href="https://abnerwei.com/post/dd568163"/>
    <id>https://abnerwei.com/post/dd568163</id>
    <published>2019-10-28T15:30:21.000Z</published>
    <updated>2019-10-28T15:30:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Median of Two Sorted Arrays</strong></p><p>There are two sorted arrays <strong>nums1</strong> and <strong>nums2</strong> of size m and n respectively.</p><p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p><p>You may assume <strong>nums1</strong> and <strong>nums2</strong> cannot be both empty.</p><span id="more"></span><p><strong>Example 1:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nums1 = [<span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">nums2 = [<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>The median is 2.0<br><strong>Example 2:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nums1 = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">nums2 = [<span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>The median is (2 + 3)/2 = 2.5</p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>“中位数”的作用是什么?</p><blockquote><p>将一个集合划分为两个长度相等的子集，其中一个子集中的元素总是大于另一个子集中的元素。</p></blockquote><p>其中有序数组又分为:</p><ul><li>奇数组: <code>[2 3 4]</code> 对应的中位数为 <code>3</code></li><li>偶数组: <code>[1 5 7 9]</code> 对应的中位数为 <code>(5 + 7) / 2 = 6</code></li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="切割数组"><a href="#切割数组" class="headerlink" title="切割数组"></a>切割数组</h3><p>通过切割将有序数组分割为左右两部分, 两部分<code>长度一致</code>，且分割的位置，左侧为左部分最大值 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>a</mi><msub><mi>x</mi><mi>L</mi></msub><mo>=</mo><mi>M</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>L</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi>P</mi><mi>a</mi><mi>r</mi><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Max_L = Max(LeftPart)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal">L</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span></p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>i</mi><msub><mi>n</mi><mi>R</mi></msub><mo>=</mo><mi>M</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>R</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>P</mi><mi>a</mi><mi>r</mi><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Min_R = Min(RightPart)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">h</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span><p>如上述奇数组和偶数组所示，切割的位置可以为一个数(3)，此时此数同时属于左右两部分，也可以为两个数中间, 此时取平均数。</p><ul><li>奇数组: <code>[2 3 4]</code> 中位数为 <code>3</code>，此时切割位置为数字<code>3</code>，将数组分为左右两部分，此时数组等同于<code>[2 (3/3) 4]</code>，所以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>a</mi><msub><mi>x</mi><mi>L</mi></msub><mo>=</mo><mn>3</mn><mo separator="true">,</mo><mi>M</mi><mi>i</mi><msub><mi>n</mi><mi>R</mi></msub><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">Max_L = 3, Min_R = 3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span></li><li>偶数组: <code>[1 5 7 9]</code> 中位数为 <code>6</code>，此时切割的位置为数字<code>5</code>与<code>7</code>之间，将数组分为左右两部分，此时数组等同于<code>[1 (5/7) 9]</code>，所以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>a</mi><msub><mi>x</mi><mi>L</mi></msub><mo>=</mo><mn>5</mn><mo separator="true">,</mo><mi>M</mi><mi>i</mi><msub><mi>n</mi><mi>R</mi></msub><mo>=</mo><mn>7</mn></mrow><annotation encoding="application/x-tex">Max_L = 5, Min_R = 7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span></span></span></span></li></ul><h3 id="切割第k个元素"><a href="#切割第k个元素" class="headerlink" title="切割第k个元素"></a>切割第k个元素</h3><h4 id="单个数组"><a href="#单个数组" class="headerlink" title="单个数组"></a>单个数组</h4><p>对于一个有序数组<code>A</code>，如果在位置<code>k</code>处切割恰好能将其分割成左右两部分长度一致的<code>Slice</code>(切割点落在数字上，而不是两个数之间)，那么此时 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>a</mi><msub><mi>x</mi><mi>L</mi></msub><mo>=</mo><mi>M</mi><mi>i</mi><msub><mi>n</mi><mi>R</mi></msub><mo>=</mo><mi>A</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Max_L = Min_R = A(k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></p><h4 id="多个数组"><a href="#多个数组" class="headerlink" title="多个数组"></a>多个数组</h4><p>如题所示，分别切割两个有序数组，分割出的左侧与右侧长度一致，定义切割位置为第<code>k</code>位的元素</p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为切割位置元素<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>a</mi><msub><mi>x</mi><mrow><mi>L</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Max_{Li}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为左侧部分第`i`位最大元素<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>i</mi><msub><mi>n</mi><mrow><mi>R</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Min_{Ri}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为右侧部分第`i`位最小元素<p><img src="https://ae01.alicdn.com/kf/Ha50a9195cbd94eb282bacf2ed06e9ad1e.png" alt="MaxL&lt;=MinR"></p><p>因为数组为有序数组，所以，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>a</mi><mi>x</mi><msub><mi>A</mi><mrow><mi>L</mi><mi>i</mi></mrow></msub><mo>&lt;</mo><mo>=</mo><mi>M</mi><mi>i</mi><mi>n</mi><msub><mi>A</mi><mrow><mi>R</mi><mi>i</mi></mrow></msub><mo separator="true">,</mo><mi>M</mi><mi>a</mi><mi>x</mi><msub><mi>B</mi><mrow><mi>L</mi><mi>i</mi></mrow></msub><mo>&lt;</mo><mo>=</mo><mi>M</mi><mi>i</mi><mi>n</mi><msub><mi>B</mi><mrow><mi>R</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">MaxA_{Li} &lt;= MinA_{Ri}, MaxB_{Li} &lt;= MinB_{Ri}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，而如果切割点在某个数上，则两边相等。</p><p>如果使得<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>a</mi><mi>x</mi><msub><mi>A</mi><mrow><mi>L</mi><mi>i</mi></mrow></msub><mo>&lt;</mo><mo>=</mo><mi>M</mi><mi>i</mi><mi>n</mi><msub><mi>B</mi><mrow><mi>R</mi><mi>i</mi></mrow></msub><mo separator="true">,</mo><mi>M</mi><mi>a</mi><mi>x</mi><msub><mi>B</mi><mrow><mi>L</mi><mi>i</mi></mrow></msub><mo>&lt;</mo><mo>=</mo><mi>M</mi><mi>i</mi><mi>n</mi><msub><mi>B</mi><mrow><mi>R</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">MaxA_{Li} &lt;= MinB_{Ri}, MaxB_{Li} &lt;= MinB_{Ri}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p><img src="https://ae01.alicdn.com/kf/H6f763d463e8e4bd9be1e3df05a898d88v.png" alt="exchange"></p><p>如果 <code>LeftPart</code>全部小于<code>RightPart</code>，如果左边的元素个数为 <code>k</code>，那么第 <code>k</code> 个元素为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>M</mi><mi>a</mi><msub><mi>x</mi><mrow><mi>L</mi><mi>a</mi></mrow></msub><mo separator="true">,</mo><mi>M</mi><mi>a</mi><msub><mi>x</mi><mrow><mi>L</mi><mi>b</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Max(Max_{La},Max_{Lb})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>而如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>a</mi><mi>x</mi><msub><mi>A</mi><mrow><mi>L</mi><mi>i</mi></mrow></msub><mo>&gt;</mo><mo>&gt;</mo><mi>M</mi><mi>i</mi><mi>n</mi><msub><mi>B</mi><mrow><mi>R</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">MaxA_{Li} &gt;&gt; MinB_{Ri}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，则说明左侧元素远大于右侧，将 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>a</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{ai}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>减小，则 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>b</mi><mi>i</mi></mrow></msub><mo>=</mo><mi>k</mi><mo>−</mo><msub><mi>S</mi><mrow><mi>a</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{bi} = k - S_{ai}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 增大；相反 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>a</mi><mi>x</mi><msub><mi>B</mi><mrow><mi>L</mi><mi>i</mi></mrow></msub><mo>&gt;</mo><mo>&gt;</mo><mi>M</mi><mi>i</mi><mi>n</mi><msub><mi>A</mi><mrow><mi>R</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">MaxB_{Li} &gt;&gt; MinA_{Ri}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>b</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{bi}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>减小，相应的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>a</mi><mi>i</mi></mrow></msub><mo>=</mo><mi>k</mi><mo>−</mo><msub><mi>S</mi><mrow><mi>b</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{ai} = k - S_{bi}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>也增大。</p><h4 id="假设切割元素k-3"><a href="#假设切割元素k-3" class="headerlink" title="假设切割元素k=3"></a>假设切割元素k=3</h4><p>对于有序数组 <code>[2 3 4]</code>、<code>[1 5 7 9]</code>设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>a</mi><mi>i</mi></mrow></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">S_{ai} = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，那么<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>b</mi><mi>i</mi></mrow></msub><mo>=</mo><mi>k</mi><mo>−</mo><msub><mi>S</mi><mrow><mi>a</mi><mi>i</mi></mrow></msub><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">S_{bi} = k - S_{ai} = 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>，即 <code>[2 / 3 4]</code>、<code>[1 5 / 7 9]</code>，此时<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>a</mi><mi>x</mi><msub><mi>A</mi><mrow><mi>L</mi><mi>i</mi></mrow></msub><mo>=</mo><mn>2</mn><mo separator="true">,</mo><mi>M</mi><mi>i</mi><mi>n</mi><msub><mi>A</mi><mrow><mi>R</mi><mi>i</mi></mrow></msub><mo>=</mo><mn>3</mn><mo separator="true">;</mo></mrow><annotation encoding="application/x-tex">MaxA_{Li} = 2, MinA_{Ri} = 3; </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">3</span><span class="mpunct">;</span></span></span></span></p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>a</mi><mi>x</mi><msub><mi>B</mi><mrow><mi>L</mi><mi>i</mi></mrow></msub><mo>=</mo><mn>5</mn><mo separator="true">,</mo><mi>M</mi><mi>i</mi><mi>n</mi><msub><mi>B</mi><mrow><mi>R</mi><mi>i</mi></mrow></msub><mo>=</mo><mn>7</mn><mo separator="true">;</mo></mrow><annotation encoding="application/x-tex">MaxB_{Li} = 5, MinB_{Ri} = 7;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">7</span><span class="mpunct">;</span></span></span></span><p>此时<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>a</mi><mi>x</mi><msub><mi>B</mi><mrow><mi>L</mi><mi>i</mi></mrow></msub><mo>&gt;</mo><mi>M</mi><mi>i</mi><mi>n</mi><msub><mi>A</mi><mrow><mi>R</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">MaxB_{Li} &gt; MinA_{Ri}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，需要将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>b</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{bi}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>减小，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>a</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{ai}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>增大，让<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>a</mi><mi>i</mi></mrow></msub><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">S_{ai} = 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>，此时有序数组分割为: <code>[2 3 / 4]</code>、<code>[1 / 5 7 9]</code>，此时</p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>a</mi><mi>x</mi><msub><mi>A</mi><mrow><mi>L</mi><mi>i</mi></mrow></msub><mo>=</mo><mn>3</mn><mo separator="true">,</mo><mi>M</mi><mi>i</mi><mi>n</mi><msub><mi>A</mi><mrow><mi>R</mi><mi>i</mi></mrow></msub><mo>=</mo><mn>4</mn><mo separator="true">;</mo></mrow><annotation encoding="application/x-tex">MaxA_{Li} = 3, MinA_{Ri} = 4;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">4</span><span class="mpunct">;</span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>a</mi><mi>x</mi><msub><mi>B</mi><mrow><mi>L</mi><mi>i</mi></mrow></msub><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mi>M</mi><mi>i</mi><mi>n</mi><msub><mi>B</mi><mrow><mi>R</mi><mi>i</mi></mrow></msub><mo>=</mo><mn>5</mn><mo separator="true">;</mo></mrow><annotation encoding="application/x-tex">MaxB_{Li} = 1, MinB_{Ri} = 5;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">5</span><span class="mpunct">;</span></span></span></span><p>满足<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>a</mi><mi>x</mi><msub><mi>A</mi><mrow><mi>L</mi><mi>i</mi></mrow></msub><mo>&lt;</mo><mi>M</mi><mi>i</mi><mi>n</mi><msub><mi>B</mi><mrow><mi>R</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">MaxA_{Li} &lt; MinB_{Ri}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>且<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>a</mi><mi>x</mi><msub><mi>B</mi><mrow><mi>L</mi><mi>i</mi></mrow></msub><mo>&lt;</mo><mi>M</mi><mi>i</mi><mi>n</mi><msub><mi>A</mi><mrow><mi>R</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">MaxB_{Li} &lt; MinA_{Ri}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，所以第 <code>k(3)</code>个元素为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>M</mi><mi>a</mi><mi>x</mi><msub><mi>A</mi><mrow><mi>L</mi><mi>i</mi></mrow></msub><mo separator="true">,</mo><mi>M</mi><mi>a</mi><mi>x</mi><msub><mi>B</mi><mrow><mi>L</mi><mi>i</mi></mrow></msub><mo stretchy="false">)</mo><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">Max(MaxA_{Li},MaxB_{Li}) = 3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span></p><h4 id="转换数组"><a href="#转换数组" class="headerlink" title="转换数组"></a>转换数组</h4><p>为了将数组中位数计算方式统一（计算左边最大值与右边最小值的平均值，切割点为两数之间而不是数字上），对数组进行如下填充：</p><table><thead><tr><th align="left">元数组</th><th><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>e</mi><msub><mi>n</mi><mrow><mi>b</mi><mi>e</mi><mi>f</mi><mi>o</mi><mi>r</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Len_{before}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal">e</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></th><th align="left">处理数组</th><th><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>e</mi><msub><mi>n</mi><mrow><mi>a</mi><mi>f</mi><mi>t</mi><mi>e</mi><mi>r</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Len_{after}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal">e</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></th></tr></thead><tbody><tr><td align="left"><code>[2 3 4]</code></td><td>3</td><td align="left"><code>[* 2 * 3 * 4 *]</code></td><td>7</td></tr><tr><td align="left"><code>[1 5 7 9]</code></td><td>4</td><td align="left"><code>[* 1 * 5 * 7 * 9 *]</code></td><td>9</td></tr></tbody></table><p>将数组元素前后位置用<code>*</code>进行填充，使得原数组<code>A</code>长度由<code>m</code>变为<code>2m+1</code>，原数组<code>B</code>长度由<code>n</code>变为<code>2n+1</code>，两个数组总长度为<code>2m+2n+2</code>，数组总长度总是为<code>偶数</code>，而偶数长度数组切分方式为：两边长度一致，取左边最大值与右边最小值的平均数。</p><blockquote><p>原元素位置 = 现元素位置/2 取整，；例如元素2，原索引为0，现索引为1，则 <code>1/2=0</code>；元素7，原索引为2，现索引为5，则 <code>5/2=2</code></p></blockquote><p>对于切割点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>则有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>a</mi><msub><mi>x</mi><mrow><mi>L</mi><mi>i</mi></mrow></msub><mo>=</mo><mo stretchy="false">(</mo><msub><mi>S</mi><mi>i</mi></msub><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn><mo separator="true">,</mo><mi>M</mi><mi>i</mi><msub><mi>n</mi><mrow><mi>R</mi><mi>i</mi></mrow></msub><mo>=</mo><msub><mi>S</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">Max_{Li} = (S_i - 1) / 2, Min_{Ri} = S_i / 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord">2</span></span></span></span> 位置上的元素。</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>对于数组A <code>[2 3 4]</code>，切割点为 <code>3</code>，则 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">S_i = 3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>，</p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>a</mi><msub><mi>x</mi><mrow><mi>L</mi><mi>i</mi></mrow></msub><mo>=</mo><mi>A</mi><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mn>3</mn><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">]</mo><mo>=</mo><mi>A</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">Max_{Li} = A[(3-1)/2] = A[1] = 3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">[</span><span class="mopen">(</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>i</mi><msub><mi>n</mi><mrow><mi>R</mi><mi>i</mi></mrow></msub><mo>=</mo><mi>A</mi><mo stretchy="false">[</mo><mn>3</mn><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">]</mo><mo>=</mo><mi>A</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">Min_{Ri} = A[3/2] = A[1] = 3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">[</span><span class="mord">3</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span><p>对于数组B <code>[1 5 7 9]</code>， 切割点在数字 <code>5</code>与<code>7</code>之间的<code>*</code>，则 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub><mo>=</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">S_i = 4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span>，</p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>a</mi><msub><mi>x</mi><mrow><mi>L</mi><mi>i</mi></mrow></msub><mo>=</mo><mi>B</mi><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mn>4</mn><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">]</mo><mo>=</mo><mi>A</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">Max_{Li} = B[(4-1)/2] = A[1] = 5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mopen">[</span><span class="mopen">(</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>i</mi><msub><mi>n</mi><mrow><mi>R</mi><mi>i</mi></mrow></msub><mo>=</mo><mi>B</mi><mo stretchy="false">[</mo><mn>4</mn><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">]</mo><mo>=</mo><mi>A</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo>=</mo><mn>7</mn></mrow><annotation encoding="application/x-tex">Min_{Ri} = B[4/2] = A[2] = 7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mopen">[</span><span class="mord">4</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span></span></span></span><p>将两个数组看作一个整体<code>S</code>，则数组总长度为 <code>2m+2n+2</code>，切割点为 <code>m+n+1</code>，所以计算 <code>m+n+1</code>以及<code>m+n+2</code>元素就可以得到中位数。</p><p>左侧部分：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo stretchy="false">[</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mi>M</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>M</mi><mi>a</mi><mi>x</mi><msub><mi>A</mi><mrow><mi>L</mi><mi>i</mi></mrow></msub><mo separator="true">,</mo><mi>M</mi><mi>a</mi><mi>x</mi><msub><mi>B</mi><mrow><mi>L</mi><mi>i</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S[m+n+1] = Max(MaxA_{Li},MaxB_{Li})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>右侧部分：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo stretchy="false">[</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo>+</mo><mn>2</mn><mo stretchy="false">]</mo><mo>=</mo><mi>M</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>M</mi><mi>i</mi><mi>n</mi><msub><mi>A</mi><mrow><mi>R</mi><mi>i</mi></mrow></msub><mo separator="true">,</mo><mi>M</mi><mi>i</mi><mi>n</mi><msub><mi>B</mi><mrow><mi>R</mi><mi>i</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S[m+n+2] = Min(MinA_{Ri},MinB_{Ri})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>中位数：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></msub><mo>=</mo><mo stretchy="false">(</mo><mi>S</mi><mo stretchy="false">[</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mi>S</mi><mo stretchy="false">[</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo>+</mo><mn>2</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn><mo>=</mo><mo stretchy="false">(</mo><mi>M</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>M</mi><mi>a</mi><mi>x</mi><msub><mi>A</mi><mrow><mi>L</mi><mi>i</mi></mrow></msub><mo separator="true">,</mo><mi>M</mi><mi>a</mi><mi>x</mi><msub><mi>B</mi><mrow><mi>L</mi><mi>i</mi></mrow></msub><mo stretchy="false">)</mo><mo>+</mo><mi>M</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>M</mi><mi>i</mi><mi>n</mi><msub><mi>A</mi><mrow><mi>R</mi><mi>i</mi></mrow></msub><mo separator="true">,</mo><mi>M</mi><mi>i</mi><mi>n</mi><msub><mi>B</mi><mrow><mi>R</mi><mi>i</mi></mrow></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">S_{mid} = (S[m+n+1] + S[m+n+2])/2 = (Max(MaxA_{Li},MaxB_{Li}) + Min(MinA_{Ri},MinB_{Ri}))/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">]</span><span class="mclose">)</span><span class="mord">/</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mord">/</span><span class="mord">2</span></span></span></span></p><h4 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h4><p>使用二分法对长度较短的数组进行切分，得到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>a</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{ai}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 则 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>b</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{bi}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 也确定了。</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>a</mi><mi>x</mi><msub><mi>A</mi><mrow><mi>L</mi><mi>i</mi></mrow></msub><mo>&gt;</mo><mi>M</mi><mi>i</mi><mi>n</mi><msub><mi>B</mi><mrow><mi>R</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">MaxA_{Li} &gt; MinB_{Ri}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，则 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>a</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{ai}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 减小，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>b</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{bi}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 增大，切割点在数组`A`左移进行二分</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>a</mi><mi>x</mi><msub><mi>B</mi><mrow><mi>L</mi><mi>i</mi></mrow></msub><mo>&gt;</mo><mi>M</mi><mi>i</mi><mi>n</mi><msub><mi>A</mi><mrow><mi>R</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">MaxB_{Li} &gt; MinA_{Ri}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，则 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>a</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{ai}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 增大，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>b</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{bi}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 减小，切割点在数组`A`右移进行二分 </li></ul><p>如果有个数组完全小于或大于中值，此时 <code>n &lt; m</code>，出现以下几种情况：</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>a</mi><mi>i</mi></mrow></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">S_{ai} = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> ，此时数组元素全部在右侧部分，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>b</mi><mi>i</mi></mrow></msub><mo>=</mo><mi>k</mi><mo>−</mo><msub><mi>S</mi><mrow><mi>a</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{bi} = k - S_{ai}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 存在与数组 `B`中，假设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>a</mi><mi>x</mi><msub><mi>A</mi><mrow><mi>L</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">MaxA_{Li}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> = `INT_MIN`</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>a</mi><mi>i</mi></mrow></msub><mo>=</mo><mn>2</mn><mi>m</mi></mrow><annotation encoding="application/x-tex">S_{ai} = 2m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathnormal">m</span></span></span></span>，此时数组元素全部在左侧部分，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>b</mi><mi>i</mi></mrow></msub><mo>=</mo><mi>k</mi><mo>−</mo><msub><mi>S</mi><mrow><mi>a</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{bi} = k - S_{ai}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 存在与数组 `B`中，假设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>i</mi><mi>n</mi><msub><mi>A</mi><mrow><mi>L</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">MinA_{Li}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> = `INT_MAX`，此时 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>a</mi><mi>x</mi><msub><mi>B</mi><mrow><mi>L</mi><mi>i</mi></mrow></msub><mo>&lt;</mo><mo>&lt;</mo><mi>M</mi><mi>i</mi><mi>n</mi><msub><mi>A</mi><mrow><mi>R</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">MaxB_{Li} &lt;&lt; MinA_{Ri}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>b</mi><mi>i</mi></mrow></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">S_{bi} = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> ，此时数组元素全部在右侧部分，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>a</mi><mi>i</mi></mrow></msub><mo>=</mo><mi>k</mi><mo>−</mo><msub><mi>S</mi><mrow><mi>b</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{ai} = k - S_{bi}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 存在与数组 `A`中，假设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>a</mi><mi>x</mi><msub><mi>B</mi><mrow><mi>L</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">MaxB_{Li}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> = `INT_MIN`</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>b</mi><mi>i</mi></mrow></msub><mo>=</mo><mn>2</mn><mi>n</mi></mrow><annotation encoding="application/x-tex">S_{bi} = 2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span></span></span></span>，此时数组元素全部在左侧部分，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>a</mi><mi>i</mi></mrow></msub><mo>=</mo><mi>k</mi><mo>−</mo><msub><mi>S</mi><mrow><mi>b</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{ai} = k - S_{bi}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 存在与数组 `A`中，假设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>i</mi><mi>n</mi><msub><mi>B</mi><mrow><mi>R</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">MinB_{Ri}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> = `INT_MAX`，此时 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>a</mi><mi>x</mi><msub><mi>A</mi><mrow><mi>L</mi><mi>i</mi></mrow></msub><mo>&lt;</mo><mo>&lt;</mo><mi>M</mi><mi>i</mi><mi>n</mi><msub><mi>B</mi><mrow><mi>R</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">MaxA_{Li} &lt;&lt; MinB_{Ri}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMedianSortedArrays</span><span class="params">(nums1 []<span class="keyword">int</span>, nums2 []<span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> m, n = <span class="built_in">len</span>(nums1), <span class="built_in">len</span>(nums2)</span><br><span class="line">    <span class="keyword">if</span> m &gt; n &#123; <span class="comment">// 确保nums1长度较短</span></span><br><span class="line">        <span class="keyword">return</span> findMedianSortedArrays(nums2, nums1)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> (</span><br><span class="line">        INT_MAX = <span class="keyword">int</span>(^<span class="keyword">uint</span>(<span class="number">0</span>) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">        INT_MIN = ^INT_MAX</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// S1,S2为切割点索引</span></span><br><span class="line">    <span class="keyword">var</span> MaxLA, MaxLB, MinRA, MinRB, S1, S2, lop <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">var</span> hi = <span class="number">2</span> * m + <span class="number">1</span> <span class="comment">//数组A补全*, 长度变为 2m+1</span></span><br><span class="line">    <span class="keyword">for</span> lop &lt;= hi &#123;</span><br><span class="line">        S1 = (lop + hi) / <span class="number">2</span>;</span><br><span class="line">        S2 = m + n - S1;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> S1 == <span class="number">0</span> &#123;</span><br><span class="line">            MaxLA = INT_MIN</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            MaxLA = nums1[(S1 - <span class="number">1</span>) / <span class="number">2</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> S1 == <span class="number">2</span> * m &#123;</span><br><span class="line">            MinRA = INT_MAX</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            MinRA = nums1[S1 / <span class="number">2</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> S2 == <span class="number">0</span> &#123;</span><br><span class="line">            MaxLB = INT_MIN</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            MaxLB = nums2[(S2 - <span class="number">1</span>) / <span class="number">2</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> S2 == <span class="number">2</span> * n &#123;</span><br><span class="line">            MinRB = INT_MAX</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            MinRB = nums2[S2 / <span class="number">2</span>]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> MaxLA &gt; MinRB &#123;</span><br><span class="line">            hi = S1 - <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> MaxLB &gt; MinRA &#123;</span><br><span class="line">            lop = S1 + <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">float64</span>(max(MaxLA, MaxLB) + min(MinRA, MinRB)) / <span class="number">2.0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a,b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a,b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>思路参考 <code>bian-bian-xiong</code>题解</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Median of Two Sorted Arrays&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are two sorted arrays &lt;strong&gt;nums1&lt;/strong&gt; and &lt;strong&gt;nums2&lt;/strong&gt; of size m and n respectively.&lt;/p&gt;
&lt;p&gt;Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).&lt;/p&gt;
&lt;p&gt;You may assume &lt;strong&gt;nums1&lt;/strong&gt; and &lt;strong&gt;nums2&lt;/strong&gt; cannot be both empty.&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="https://abnerwei.com/categories/leetcode/"/>
    
    
    <category term="array" scheme="https://abnerwei.com/tags/array/"/>
    
    <category term="binary-search" scheme="https://abnerwei.com/tags/binary-search/"/>
    
    <category term="divide-and-conquer" scheme="https://abnerwei.com/tags/divide-and-conquer/"/>
    
  </entry>
  
  <entry>
    <title>微服务架构索引</title>
    <link href="https://abnerwei.com/post/7936a650"/>
    <id>https://abnerwei.com/post/7936a650</id>
    <published>2019-03-30T06:13:21.000Z</published>
    <updated>2019-03-30T06:13:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Unix 哲学是：构建小型、单一的应用程序，不管用什么语言，只做一件小而美的事情，用 stdin / stdout 进行通信，并通过管道进行连接。</p></blockquote><h2 id="微服务的概念与发展"><a href="#微服务的概念与发展" class="headerlink" title="微服务的概念与发展"></a>微服务的概念与发展</h2><p>在1984年Rob Pike和Brian W.Kernighan发布的 <a href="http://harmful.cat-v.org/cat-v/">Unix环境编程</a> 文章中，使用了<code>BSD</code>的<code>cat -v</code>的例子来认证<code>Unix哲学</code>。这不就正是 James Lewis 和 Martin Fowler 给出的<a href="https://martinfowler.com/articles/microservices.html">微服务定义</a>。</p><span id="more"></span><p>微服务的概念大概从2013年开始就越来越热，从BAT之类的科技巨头到只有几个人的技术公司，无不在谈论微服务。从Unix环境编程中可以看出，早在半个世纪以前就有了微服务的概念。关于微服务理论介绍的文章太多，口才优秀的人可以给你说上一天，一些大公司也有自己完善的服务治理经验。本位用于总结一直以来对于微服务学习与设计的知识结构。</p><h2 id="云原生（Cloud-Native）"><a href="#云原生（Cloud-Native）" class="headerlink" title="云原生（Cloud Native）"></a>云原生（Cloud Native）</h2><p>现在但凡和软件技术有点裙带关系的机构、组织、人士都在谈论各种“云”。还有不少公司以云**、**云、*云*作为公司的名称。抑或着讲服务器迁移到公有云主机厂商的虚拟机，与IT技术沾一点边或者完全不沾边的都可以随时抛出“云应用”、“云计算”、“云数据”等听起来就很高大上的术语持续忽悠着你。</p><p>在2013年<strong>Matt Stine</strong>的<strong>Cloud Native</strong>概念横空出世。<strong>Cloud Native</strong>是一系列概念的集合，围绕这一系列标准可以构建从技术架构、到运维管理、再到团队协作的整体性框架。他让基于微服务的应用搭建成为一个标准流程，主要涵盖以下几点内容。</p><h4 id="1、微服务（分布式系统）"><a href="#1、微服务（分布式系统）" class="headerlink" title="1、微服务（分布式系统）"></a>1、微服务（分布式系统）</h4><ul><li><p>微服务本身就是一个很具体的概念，简单的说就是：根据性能要求横向拆分为相同功能的负载均衡节点，根据业务要求纵向拆分为不同功能的服务节点。</p></li><li><p>其次，微服务这个术语下还涵盖了大量概念，也是一个概念的集合，比如：熔断、降级、心跳检查、消息队列、负载均衡、服务注册、服务发现、去中心化、服务通信（RPC、RMI、TCP/IP)、分布式事物（分布式数据库）、分布式存储、分布式同步对象（数据）、缓存穿透、缓存雪崩、业务追踪、统一日志管理、API网关等等。每一个概念背后都是一项功能标准，都有一项或多项技术在支撑。</p><blockquote><p>通常优秀的微服务框架都会实现以上部分功能，同时支撑内部或外部扩展。比如要防止缓存穿透可以自己写一个Bloom Filter（布隆过滤器），或者缓存用Redis（&gt;4.0)并添加过滤器插件，再或者在物理缓存之前再使用Redisson、Hazelcast之类的内存级缓存。</p></blockquote></li><li><p>微服务也特指云服务分布式系统的底层技术。比如Dubbo、Spring Cloud以及后面将会提到的Service Mesh等，都会把他们称为微服务框架。</p></li></ul><h4 id="2、康威定律"><a href="#2、康威定律" class="headerlink" title="2、康威定律"></a>2、康威定律</h4><p>在使用与架构微服务框架的时候，曾经也思考过这些问题：为什么微服务技术或团队是现在的这种结构？为什么微服务开发需要和敏捷模型配合？为什么使用微服务可以使用不同的语言？而后我找到了一个结论来解释这一切——康威定律。康威定律是微服务技术团队的基础理论，他主要由四个定律组成：</p><ul><li><p><strong>组织的沟通方式通过系统的设计结构来约束</strong>：团队的沟通成本呈现指数增长，所以必须把业务/团队边界压缩在固定人员中（5~15人）。</p></li><li><p><strong>无法完美但能高效</strong>：一个系统Bug永远改不完，与其追求无Bug的完美系统，不如追求可允许的修复速度。通过反复验证强化系统。这是敏捷开发、持续集成发布、自动化监控的本源——即使测试覆盖到100%也没法避免不出现bug，但是能在波及面可控的范围内快速解决问题，这样是否更容易接受？</p></li><li><p><strong>线性团队同质化，业务团队内聚化</strong>：如以下示例图</p><p>（1）孤岛式应用架构</p><p><img src="https://ae01.alicdn.com/kf/HTB1D0bvTa6qK1RjSZFm7600PFXar.png" alt="孤岛式应用架构"></p><p>（2）微服务应用架构</p></li></ul><p><img src="https://ae01.alicdn.com/kf/HTB1F42qTmzqK1RjSZFH7623CpXaF.png" alt="微服务架构"></p><p>​    图1）是一个线性团队，前端UI团队、后端中间件团队、DBA团队分工明确层次清晰，然后开发出来的系统也会呈现出对应的样子，因为团队划分的分层架构决定了系统的最终形态。（Communication dictates design 组织沟通方式会通过系统设计表达出来）</p><p>​    图2）是一个以业务划分的团队，每一个团队都有一个完整的从前端UI到后端中间件的“生态”。</p><p>​    康威第三定律告诉我们小团队内部的沟通往往密集而且更加高效，按照这个方式划分的每个子系统自然会逐渐内聚，而团队之间更加倾向以接口沟通耦合性更低。</p><ul><li><strong>系统的拆解倾向性</strong>。在架构演进的过程中，随着系统规模的增加合理的解决方法都是将复杂的问题拆分。比如数据库并发太高无法承担了，我们一般会执行以下几个步骤：<ul><li>增加Redis、Memcached之类的缓存工具，将原本直接读取物理数据库的一个问题拆解成2个子问题，并分别去解决对应的更多问题。</li><li>横向按字段拆表，将一些频繁更新的字段独立到独立的表去以关联的形式存在。</li><li>纵向按照数据业务特征（例如时间段）分区数据。</li></ul></li></ul><h4 id="3、敏捷开发与敏捷基础设施"><a href="#3、敏捷开发与敏捷基础设施" class="headerlink" title="3、敏捷开发与敏捷基础设施"></a>3、敏捷开发与敏捷基础设施</h4><p>在康威定律中解释了敏捷开发对于微服务架构的重要性。敏捷开发需要一种流程规范外加一些适合与流程规范的工具，比如我已经在公司里推行了GitLab、Jira之类的敏捷基础设施工具，敏捷工具和方法众多，比如公司的每日站会、卡片式任务和看板等等，这需要根据团队的需要和结构以及团队规模适时调整。</p><h4 id="4、DevOps"><a href="#4、DevOps" class="headerlink" title="4、DevOps"></a>4、DevOps</h4><p>DevOps（Development、Operations）本身并没有使用指定具体的技术实现，她是一个从软件开发到产品上线发布的流程规范，现实执行中我们拥有有大量的工具提供支持。流程包括：</p><ul><li>需求管理。</li><li>编码开发，单元测试（Junit、Jest白盒测试）。</li><li>QA（黑盒测试）。自动化测试（Server walker）、代码质量监控（Sonar、EsLint）、接口测试（Jmeter、Loadrunner）。</li><li>上线发布运维。包括压力测试、多节点的运维管理、以及<em>Cloud Foundry</em>, <em>Kubernetes</em>, <em>Apache YARN</em>, and <em>Apache Mesos</em>,<em>Kubernetes</em>等云平台的使用。</li></ul><p>公司现在推广使用CMMI的敏捷模型配合整个流程。</p><h4 id="5、CI-Continuous-Integration-CD-Continuous-Deployment"><a href="#5、CI-Continuous-Integration-CD-Continuous-Deployment" class="headerlink" title="5、CI(Continuous Integration)/CD(Continuous Deployment)"></a>5、CI(Continuous Integration)/CD(Continuous Deployment)</h4><p>实际上来讲CI/CD应该属于DevOps的范畴，其关注点在程序员代码交付和缺陷测试之上。技术开发人员和测试人员都应该是密切配合的，一个迭代周期之内应该是开发先推动来测试，然后测试驱动开发。这个过程不用想得太复杂，可以用Jenkins相关的各种插件实现代码持续集成、自动化检测、测试环境持续发布上线。</p><h4 id="6、More-Details"><a href="#6、More-Details" class="headerlink" title="6、More Details"></a>6、More Details</h4><p>微服务还涵盖了对一些细节的描述，比如分布式事物（最终一致性、容错性、可用性、缓存与实体同步）、弹性伸缩等。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Unix 哲学是：构建小型、单一的应用程序，不管用什么语言，只做一件小而美的事情，用 stdin / stdout 进行通信，并通过管道进行连接。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;微服务的概念与发展&quot;&gt;&lt;a href=&quot;#微服务的概念与发展&quot; class=&quot;headerlink&quot; title=&quot;微服务的概念与发展&quot;&gt;&lt;/a&gt;微服务的概念与发展&lt;/h2&gt;&lt;p&gt;在1984年Rob Pike和Brian W.Kernighan发布的 &lt;a href=&quot;http://harmful.cat-v.org/cat-v/&quot;&gt;Unix环境编程&lt;/a&gt; 文章中，使用了&lt;code&gt;BSD&lt;/code&gt;的&lt;code&gt;cat -v&lt;/code&gt;的例子来认证&lt;code&gt;Unix哲学&lt;/code&gt;。这不就正是 James Lewis 和 Martin Fowler 给出的&lt;a href=&quot;https://martinfowler.com/articles/microservices.html&quot;&gt;微服务定义&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="架构设计" scheme="https://abnerwei.com/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="架构设计" scheme="https://abnerwei.com/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="微服务" scheme="https://abnerwei.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="团队管理" scheme="https://abnerwei.com/tags/%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Go并发下的Context工作流程</title>
    <link href="https://abnerwei.com/post/4adbe48d"/>
    <id>https://abnerwei.com/post/4adbe48d</id>
    <published>2019-03-25T15:43:21.000Z</published>
    <updated>2019-03-25T15:43:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Context？"><a href="#什么是Context？" class="headerlink" title="什么是Context？"></a>什么是Context？</h2><p>读到很多关于Context(上下文)的术语，如应用上下文，请求上下文等，查阅资料但没有得到理解？有没有比较好的解释？</p><p>Context 指做一件事情的背景/环境/上下文/所需要的必要的数据。</p><span id="more"></span><p>本文就Golang的Context标准库介绍context的工作机制；通过外部API创建并使用context标准库；从源码角度分析介绍context工作流程。</p><p>context标准库很好的解决了多goroutine下通知传递和元数据处理。由于Golang中的goroutine之间没有父子关系，所以也不存在子进程退出后的通知机制。多个goroutine之间协同工作设计了以下四个方面：通信、同步、通知、退出四个方面：</p><ul><li><strong>通信</strong>：chan通道是各goroutine之间通信的基础。（程序的数据通道）</li><li><strong>同步</strong>：使用不带缓冲的chan；sync.WaitGroup为多个goroutine提供同步等待机制；mutex锁与读写锁机制</li><li><strong>通知</strong>：通知与上文通信的区别是，通知的作用为管理，控制流数据。一般的解决方法是在输入端绑定两个chan，通过select收敛处理。</li><li><strong>退出</strong>：与通知类似，即增加一个单独的通道，借助chan和select的广播机制（close chan to broadcast）实现退出</li></ul><p>从Go1.7版本开始使用context标准库来处理退出机制。主要提供了两个功能：<code>退出通知</code>和<code>元数据传递</code>。可以传递给整个goroutine调用树的每个goroutine。</p><h2 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h2><p>每一个创建context的goroutine定义为root节点：root节点负责创建一个实现context接口的具体对象，并将该对象作为参数传递至新拉起的goroutine作为其上下文。下游goroutine继续封装该对象并以此类推向下传递。</p><h3 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h3><p><strong>context接口：</strong>作为一个基本接口，所有的context对象都要实现该接口，并将其作为使用者调度时的参数类型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上下文接口包含截止时间、退出信号和其他value值</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Context方法可以同是被多个goroutine调用.</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">interface</span> &#123;</span><br><span class="line">  <span class="comment">// Deadline 返回的time为上下文工作完成时间</span></span><br><span class="line">  <span class="comment">// 如果Context实现了超时机制，该方法返回超时时间，true。否则ok==false</span></span><br><span class="line">  Deadline() (deadline time.Time, ok <span class="keyword">bool</span>)  </span><br><span class="line">  <span class="comment">// Done 当上下文工作完成时返回一个退出信号</span></span><br><span class="line">  <span class="comment">// Done 返回nil时表示当前上下文可以退出</span></span><br><span class="line">  <span class="comment">// 当连续调用Done返回相同的值时，当前Context将不会退出.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// 当触发退出信号时，退出操作在 WithCancel 中执行;</span></span><br><span class="line">  <span class="comment">// WithDeadline 将在Deadline 时间之间关闭</span></span><br><span class="line">  <span class="comment">// WithTimeout 将在超时时关闭Done</span></span><br><span class="line">  <span class="comment">// func Stream(ctx context.Context, out chan&lt;- Value) error &#123;</span></span><br><span class="line">  <span class="comment">//  for &#123;</span></span><br><span class="line">  <span class="comment">//  v, err := DoSomething(ctx)</span></span><br><span class="line">  <span class="comment">//  if err != nil &#123;</span></span><br><span class="line">  <span class="comment">//  return err</span></span><br><span class="line">  <span class="comment">//  &#125;</span></span><br><span class="line">  <span class="comment">//  select &#123;</span></span><br><span class="line">  <span class="comment">//  case &lt;-ctx.Done():</span></span><br><span class="line">  <span class="comment">//  return ctx.Err()</span></span><br><span class="line">  <span class="comment">//  case out &lt;- v:</span></span><br><span class="line">  <span class="comment">//  &#125;</span></span><br><span class="line">  <span class="comment">//  &#125;</span></span><br><span class="line">  <span class="comment">//  &#125;</span></span><br><span class="line">  <span class="comment">// 使用&lt;-cahn struct&#123;&#125;来通知退出，供被调用的goroutine监听.</span></span><br><span class="line">  Done() &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">  <span class="comment">// 当Done未被关闭时，Err返回nil.</span></span><br><span class="line">  <span class="comment">// 当Done被关闭时，返回一个非nil的错误信息</span></span><br><span class="line">  Err() error  </span><br><span class="line">  <span class="comment">// package user</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// import &quot;context&quot;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// type User struct &#123;...&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// type key int</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// var userKey key</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// //NewContext 返回了一个新的context传递元数据.</span></span><br><span class="line">  <span class="comment">// func NewContext(ctx context.Context, u *User) context.Context &#123;</span></span><br><span class="line">  <span class="comment">// return context.WithValue(ctx, userKey, u)</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// //FromContext 返回了存储在上下文关系中的user信息.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// func FromContext(ctx context.Context) (*User, bool) &#123;</span></span><br><span class="line">  <span class="comment">// u, ok := ctx.Value(userKey).(*User)</span></span><br><span class="line">  <span class="comment">// return u, ok</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  Value(key <span class="keyword">interface</span>&#123;&#125;) <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>canceler接口：</strong>拓展接口，规定了取消通知的Context具体类型需要实现的接口：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> canceler <span class="keyword">interface</span> &#123;</span><br><span class="line">  <span class="comment">// 通知后续创建的goroutine退出</span></span><br><span class="line">  cancel(removeFromParent <span class="keyword">bool</span>, err error)</span><br><span class="line">  Done() &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h3><p><strong>emptyCtx：</strong>实现了一个不具备任何功能的Context接口，其存在的目的就是作为Context对象树的root节点：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> emptyCtx <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*emptyCtx)</span> <span class="title">Deadline</span><span class="params">()</span> <span class="params">(deadline time.Time, ok <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*emptyCtx)</span> <span class="title">Done</span><span class="params">()</span> &lt;-<span class="title">chan</span> <span class="title">struct</span></span>&#123;&#125; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*emptyCtx)</span> <span class="title">Err</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*emptyCtx)</span> <span class="title">Value</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    background = <span class="built_in">new</span>(emptyCtx)</span><br><span class="line">    todo       = <span class="built_in">new</span>(emptyCtx)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Background</span><span class="params">()</span> <span class="title">Context</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> background</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TODO</span><span class="params">()</span> <span class="title">Context</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> todo</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这两者返回值是一样的，文档上建议main函数可以使用Background()创建root context</span></span><br></pre></td></tr></table></figure><p>**cancelCtx:**可以认为它与emptyCtx最大的区别在于，具体实现了cancel函数。即它可以向子goroutine传递cancel消息。</p><p>**timerCtx:**另一个实现Context接口的具体类型，内部封装了cancelCtx类型实例，同时拥有deadline变量，用于实现实时退出通知。</p><p>**valueCtx:**实现了Context接口的具体类型，内部封装cancelCtx类型实例，同时封装了一个kv存储变量，用于传递通知消息。</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>除了root context可以使用<code>Background()</code>创建以外，其余的context都应该从<code>cancelCtx</code>，<code>timerCtx</code>，<code>valueCtx</code>中选取一个来构建具体对象：</p><ul><li>func WithCancel(parent Context) (Context, CancelFunc)：创建cancelCtx实例。</li><li>func WithDeadline(parent Context, deadline time.Time)(Context, CancelFunc)与func WithTimeout(parent Context, timeout time.Duration)(Context, CancelFunc)：两种方法都可以创建一个带有超时通知的Context具体对象timerCtx，具体差别在于传递绝对或相对时间。</li><li>func WithValue(parent Context, key, val interface{}) Context：创建valueCtx实例。</li></ul><p>1、创建root context并构建一个WithCancel类型的上下文，使用该上下文注册一个goroutine模拟运行：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ctxa, cancel := context.WithCancel(context.Background())</span><br><span class="line">    <span class="keyword">go</span> work(ctxa, <span class="string">&quot;work1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">work</span><span class="params">(ctx context.Context, name <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>&#123;</span><br><span class="line">        <span class="keyword">select</span>&#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">            <span class="built_in">println</span>(name,<span class="string">&quot; get message to quit&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">println</span>(name,<span class="string">&quot; is running&quot;</span>)</span><br><span class="line">            time.Sleep(time.Second)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、使用WithDeadline包装ctxa，并使用新的上下文注册另一个goroutine：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ctxb, _ := context.WithTimeout(ctxa, time.Second * <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">go</span> work(ctxb, <span class="string">&quot;work2&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、使用WithValue包装ctxb，并注册新的goroutine：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ctxc := context.WithValue(ctxb, <span class="string">&quot;key&quot;</span>, <span class="string">&quot;custom value&quot;</span>)</span><br><span class="line">    <span class="keyword">go</span> workWithValue(ctxc, <span class="string">&quot;work3&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">workWithValue</span><span class="params">(ctx context.Context, name <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>&#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">            <span class="built_in">println</span>(name,<span class="string">&quot; get message to quit&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            value:=ctx.Value(<span class="string">&quot;key&quot;</span>).(<span class="keyword">string</span>)</span><br><span class="line">            <span class="built_in">println</span>(name, <span class="string">&quot; is running with value&quot;</span>, value)</span><br><span class="line">            time.Sleep(time.Second)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、最后在main函数中手动关闭ctxa，并等待输出结果:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    time.Sleep(<span class="number">5</span>*time.Second)</span><br><span class="line">    cancel()</span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行程序并查看输出结果：</span></span><br><span class="line"><span class="comment">//work1  is running</span></span><br><span class="line"><span class="comment">//work3  is running with value custom value</span></span><br><span class="line"><span class="comment">//work2  is running</span></span><br><span class="line"><span class="comment">//work1  is running</span></span><br><span class="line"><span class="comment">//work2  is running</span></span><br><span class="line"><span class="comment">//work3  is running with value custom value</span></span><br><span class="line"><span class="comment">//work2  is running</span></span><br><span class="line"><span class="comment">//work3  is running with value custom value</span></span><br><span class="line"><span class="comment">//work1  is running</span></span><br><span class="line"><span class="comment">// //work2超时并通知work3退出</span></span><br><span class="line"><span class="comment">//work2  get message to quit</span></span><br><span class="line"><span class="comment">//work3  get message to quit</span></span><br><span class="line"><span class="comment">//work1  is running</span></span><br><span class="line"><span class="comment">//work1  is running</span></span><br><span class="line"><span class="comment">//work1  get message to quit</span></span><br></pre></td></tr></table></figure><p>可以看到，当ctxb因超时而退出之后，会通知由他包装的所有子goroutine（ctxc），并通知退出。各context的关系结构如下：</p><blockquote><p>Background() -&gt; ctxa -&gt; ctxd -&gt; ctxc</p></blockquote><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>主要研究两个问题，即各Context如何保存父类和子类上下文；以及cancel方法如何实现通知子类context实现退出功能。</p><h3 id="context的数据结构"><a href="#context的数据结构" class="headerlink" title="context的数据结构"></a>context的数据结构</h3><p>1、<strong>emptyCtx</strong>只是一个uint类型的变量，其目的只是为了作为第一个goroutine ctx的parent，因此他不需要，也没法保存子类上下文结构。</p><p>2、<strong>cancelCtx</strong>的数据结构：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> cancelCtx <span class="keyword">struct</span> &#123;</span><br><span class="line">    Context</span><br><span class="line"></span><br><span class="line">    mu       sync.Mutex            <span class="comment">// protects following fields</span></span><br><span class="line">    done     <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;         <span class="comment">// created lazily, closed by first cancel call</span></span><br><span class="line">    children <span class="keyword">map</span>[canceler]<span class="keyword">struct</span>&#123;&#125; <span class="comment">// set to nil by the first cancel call</span></span><br><span class="line">    err      error                 <span class="comment">// set to non-nil by the first cancel call</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Context接口保存的就是父类的context。children map[canceler]struct{}保存的是所有直属与这个context的子类context。done chan struct{}用于发送退出信号。<br>我们查看创建cancelCtx的<code>APIfunc WithCancel(…)…</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithCancel</span><span class="params">(parent Context)</span> <span class="params">(ctx Context, cancel CancelFunc)</span></span> &#123;</span><br><span class="line">    c := newCancelCtx(parent)</span><br><span class="line">    propagateCancel(parent, &amp;c)</span><br><span class="line">    <span class="keyword">return</span> &amp;c, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; c.cancel(<span class="literal">true</span>, Canceled) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newCancelCtx</span><span class="params">(parent Context)</span> <span class="title">cancelCtx</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cancelCtx&#123;Context: parent&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>propagateCancel函数的作用是将自己注册至parent context。我们稍后会讲解这个函数。</p><p>3、<strong>timerCtx</strong>的数据结构：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> timerCtx <span class="keyword">struct</span> &#123;</span><br><span class="line">    cancelCtx</span><br><span class="line">    timer *time.Timer <span class="comment">// Under cancelCtx.mu.</span></span><br><span class="line"></span><br><span class="line">    deadline time.Time</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>timerCtx继承于cancelCtx，并为定时退出功能新增自己的数据结构。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithDeadline</span><span class="params">(parent Context, d time.Time)</span> <span class="params">(Context, CancelFunc)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> cur, ok := parent.Deadline(); ok &amp;&amp; cur.Before(d) &#123;</span><br><span class="line">        <span class="comment">// The current deadline is already sooner than the new one.</span></span><br><span class="line">        <span class="keyword">return</span> WithCancel(parent)</span><br><span class="line">    &#125;</span><br><span class="line">    c := &amp;timerCtx&#123;</span><br><span class="line">        cancelCtx: newCancelCtx(parent),</span><br><span class="line">        deadline:  d,</span><br><span class="line">    &#125;</span><br><span class="line">    propagateCancel(parent, c)</span><br><span class="line"><span class="comment">// 定时退出机制</span></span><br><span class="line">    dur := time.Until(d)</span><br><span class="line">    <span class="keyword">if</span> dur &lt;= <span class="number">0</span> &#123;</span><br><span class="line">        c.cancel(<span class="literal">true</span>, DeadlineExceeded) <span class="comment">// deadline has already passed</span></span><br><span class="line">        <span class="keyword">return</span> c, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; c.cancel(<span class="literal">true</span>, Canceled) &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    c.mu.Lock()</span><br><span class="line">    <span class="keyword">defer</span> c.mu.Unlock()</span><br><span class="line">    <span class="keyword">if</span> c.err == <span class="literal">nil</span> &#123;</span><br><span class="line">        c.timer = time.AfterFunc(dur, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            c.cancel(<span class="literal">true</span>, DeadlineExceeded)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; c.cancel(<span class="literal">true</span>, Canceled) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newCancelCtx</span><span class="params">(parent Context)</span> <span class="title">cancelCtx</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cancelCtx&#123;Context: parent&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>timerCtx查看parent context的方法是<code>timerCtx.cancelCtx.Context</code>。</p><p>4、<code>valueCtx</code>的数据结构：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> valueCtx <span class="keyword">struct</span> &#123;</span><br><span class="line">    Context</span><br><span class="line">    key, val <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相较于timerCtx而言非常简单，没有继承于cancelCtx struct，而是直接继承于Context接口。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithValue</span><span class="params">(parent Context, key, val <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">Context</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> key == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">&quot;nil key&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> !reflect.TypeOf(key).Comparable() &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">&quot;key is not comparable&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &amp;valueCtx&#123;parent, key, val&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h3><p>两个疑问:</p><ul><li><p>第一，valueCtx为什么没有propagateCancel函数向parent context注册自己。既然没有注册，为何ctxb超时后能通知ctxc一起退出。</p></li><li><p>第二，valueCtx是如何存储children和parent context结构的。相较于同样绑定Context接口的cancelCtx，valueCtx并没有children数据。</p><p>第二个问题能解决一半第一个问题，即为何不向parent context注册。先说结论：<strong>valueCtx的children context注册在valueCtx的parent context上。</strong>函数func propagateCancel(…)负责注册信息，看一下构造：</p></li></ul><h4 id="func-propagateCancel"><a href="#func-propagateCancel" class="headerlink" title="func propagateCancel"></a>func propagateCancel</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">propagateCancel</span><span class="params">(parent Context, child canceler)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> parent.Done() == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="comment">// parent is never canceled</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> p, ok := parentCancelCtx(parent); ok &#123;</span><br><span class="line">        p.mu.Lock()</span><br><span class="line">        <span class="keyword">if</span> p.err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="comment">// parent has already been canceled</span></span><br><span class="line">            child.cancel(<span class="literal">false</span>, p.err)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> p.children == <span class="literal">nil</span> &#123;</span><br><span class="line">                p.children = <span class="built_in">make</span>(<span class="keyword">map</span>[canceler]<span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            p.children[child] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        p.mu.Unlock()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> &lt;-parent.Done():</span><br><span class="line">                child.cancel(<span class="literal">false</span>, parent.Err())</span><br><span class="line">            <span class="keyword">case</span> &lt;-child.Done():</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的主要逻辑如下：接收parent context 和 child canceler方法，若parent为emptyCtx，则不注册；否则通过func<code>parentCancelCtx</code>寻找最近的一个<code>*cancelCtx</code>；若该<code>cancelCtx</code>已经结束，则调用child的cancel方法，否则向该cancelCtx注册child。</p><h4 id="func-parentCancelCtx"><a href="#func-parentCancelCtx" class="headerlink" title="func parentCancelCtx"></a>func parentCancelCtx</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">parentCancelCtx</span><span class="params">(parent Context)</span> <span class="params">(*cancelCtx, <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> c := parent.(<span class="keyword">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> *cancelCtx:</span><br><span class="line">            <span class="keyword">return</span> c, <span class="literal">true</span></span><br><span class="line">        <span class="keyword">case</span> *timerCtx:</span><br><span class="line">            <span class="keyword">return</span> &amp;c.cancelCtx, <span class="literal">true</span></span><br><span class="line">        <span class="keyword">case</span> *valueCtx:</span><br><span class="line">            parent = c.Context</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>func parentCancelCtx从parentCtx</code>中向上迭代寻找第一个<strong>cancelCtx</strong>并返回。从函数逻辑中可以看到，只有当parent.(type)为<strong>*valueCtx</strong>的时候，parent才会向上迭代而不是立即返回。否则该函数都是直接返回或返回经过包装的<strong>*cancelCtx</strong>。因此我们可以发现，valueCtx是依赖于parentCtx的*cancelCtx结构的。</p><p>第二个问题，事实上，parentCtx根本无需，也没有办法通过Done()方法通知valueCtx，valueCtx也没有额外实现Done()方法。可以理解为：valueCtx与parentCtx公用一个done channel，当parentCtx调用了cancel方法并关闭了done channel时，监听valueCtx的done channel的goroutine同样会收到退出信号。另外，当parentCtx没有实现cancel方法（如emptyCtx）时，可以认为valueCtx也是无法cancel的。</p><p><img src="https://ae01.alicdn.com/kf/HTB19WINafc3T1VjSZPf763WHXXae.png" alt="Ctx"></p><h4 id="func-c-cancelCtx-cancel"><a href="#func-c-cancelCtx-cancel" class="headerlink" title="func (c *cancelCtx) cancel"></a>func (c *cancelCtx) cancel</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *cancelCtx)</span> <span class="title">cancel</span><span class="params">(removeFromParent <span class="keyword">bool</span>, err error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">&quot;context: internal error: missing cancel error&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c.mu.Lock()</span><br><span class="line">    <span class="keyword">if</span> c.err != <span class="literal">nil</span> &#123;</span><br><span class="line">        c.mu.Unlock()</span><br><span class="line">        <span class="keyword">return</span> <span class="comment">// already canceled</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c.err = err</span><br><span class="line">    <span class="keyword">if</span> c.done == <span class="literal">nil</span> &#123;</span><br><span class="line">        c.done = closedchan</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">close</span>(c.done)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> child := <span class="keyword">range</span> c.children &#123;</span><br><span class="line">        child.cancel(<span class="literal">false</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    c.children = <span class="literal">nil</span></span><br><span class="line">    c.mu.Unlock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> removeFromParent &#123;</span><br><span class="line">        removeChild(c.Context, c)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法的主要逻辑如下：</p><ul><li>若外部err为空，则代表这是一个非法的cancel操作，抛出panic；</li><li>若cancelCtx内部err不为空，说明该Ctx已经执行过cancel操作，直接返回；</li><li>关闭done channel，关联该Ctx的goroutine收到退出通知；</li><li>遍历children，若有的话，执行child.cancel操作；</li><li>调用<code>removeChild</code>将自己从parent context中移除。</li></ul><h4 id="func-c-timerCtx-cancel"><a href="#func-c-timerCtx-cancel" class="headerlink" title="func (c *timerCtx) cancel"></a>func (c *timerCtx) cancel</h4><p>与cancelCtx十分相似。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是Context？&quot;&gt;&lt;a href=&quot;#什么是Context？&quot; class=&quot;headerlink&quot; title=&quot;什么是Context？&quot;&gt;&lt;/a&gt;什么是Context？&lt;/h2&gt;&lt;p&gt;读到很多关于Context(上下文)的术语，如应用上下文，请求上下文等，查阅资料但没有得到理解？有没有比较好的解释？&lt;/p&gt;
&lt;p&gt;Context 指做一件事情的背景/环境/上下文/所需要的必要的数据。&lt;/p&gt;</summary>
    
    
    
    <category term="Golang" scheme="https://abnerwei.com/categories/golang/"/>
    
    
    <category term="Golang" scheme="https://abnerwei.com/tags/golang/"/>
    
    <category term="Goroutine" scheme="https://abnerwei.com/tags/goroutine/"/>
    
    <category term="Context" scheme="https://abnerwei.com/tags/context/"/>
    
  </entry>
  
  <entry>
    <title>Golang位操作</title>
    <link href="https://abnerwei.com/post/c61e8956"/>
    <id>https://abnerwei.com/post/c61e8956</id>
    <published>2019-03-18T07:43:21.000Z</published>
    <updated>2019-03-18T07:43:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前学习语言一直忽略的就是所有语言中关于位操作，觉得用处并不多，可能用到也非常简单的用法，但是其实它们的作用还是非常大的。以下是一些Golang位操作符的基础：</p><span id="more"></span><h4 id="与操作-amp"><a href="#与操作-amp" class="headerlink" title="与操作: &amp;"></a>与操作: &amp;</h4><p>1 &amp; 1 = 1<br>1 &amp; 0 = 0<br>0 &amp; 1 = 0<br>0 &amp; 0 = 0</p><h4 id="或操作"><a href="#或操作" class="headerlink" title="或操作: |"></a>或操作: |</h4><p>1 | 1 = 1<br>1 | 0 = 1<br>0 | 1 = 1<br>0 | 0 = 0</p><h4 id="异或"><a href="#异或" class="headerlink" title="异或: ^"></a>异或: ^</h4><p>1 ^ 1 = 1<br>1 ^ 0 = 1<br>0 ^ 1 = 1<br>0 ^ 0 = 0</p><h4 id="左移-lt-lt"><a href="#左移-lt-lt" class="headerlink" title="左移: &lt;&lt;"></a>左移: &lt;&lt;</h4><p>1 &lt;&lt; 10 = 1024<br>1 &lt;&lt; 20 = 1M<br>1 &lt;&lt; 30 = 1G</p><h4 id="右移-gt-gt"><a href="#右移-gt-gt" class="headerlink" title="右移: &gt;&gt;"></a>右移: &gt;&gt;</h4><p>1024 &gt;&gt; 10 = 1<br>1024 &gt;&gt; 1 = 512<br>1025 &gt;&gt; 2 = 256</p><p>关于上述的例子可能在实际的运算中并不是十分的严谨，但是也为我们的业务实现提供了一种思路。</p><p>这里拿优酷土豆会员的特权举个例子：</p><p>一个优酷账号可以为体验会员、白银会员、黄金会员、酷喵会员…</p><p>我们常用的做法就是数据库中存储这个字段表示这个用户开通了哪些特权，如以下代码所示:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> users <span class="keyword">struct</span> &#123;</span><br><span class="line">  name<span class="keyword">string</span></span><br><span class="line">  flag<span class="keyword">uint8</span></span><br><span class="line">  privilege</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> privilege <span class="keyword">struct</span> &#123;</span><br><span class="line">  vip<span class="keyword">bool</span></span><br><span class="line">  experience <span class="keyword">bool</span></span><br><span class="line">  silver <span class="keyword">bool</span></span><br><span class="line">  gold<span class="keyword">bool</span></span><br><span class="line">  cool<span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setVip</span><span class="params">(user users)</span> <span class="title">users</span></span> &#123;</span><br><span class="line"> user.vip = <span class="literal">true</span></span><br><span class="line"> <span class="keyword">return</span> user</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isVip</span><span class="params">(user users)</span></span> &#123;</span><br><span class="line"> <span class="keyword">if</span> user.vip &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;user is vip&quot;</span>)</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;user is not vip&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">binaryTest</span><span class="params">()</span></span> &#123;</span><br><span class="line"> <span class="keyword">var</span> user users</span><br><span class="line"> user.name = <span class="string">&quot;test01&quot;</span></span><br><span class="line"> user.vip = <span class="literal">true</span></span><br><span class="line"> isVip(user)</span><br><span class="line"> user.vip = <span class="literal">false</span></span><br><span class="line"> isVip(user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> binaryTest()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种实现方式也可以，但是明显我们需要为每个类型都做操作，并且如果以后又有更多的各种各样的会员有需要添加新的，所以并不是最佳方法，下面我们通过位操作来实现上述的功能，代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> users <span class="keyword">struct</span> &#123;</span><br><span class="line">  name<span class="keyword">string</span></span><br><span class="line">  flag<span class="keyword">uint8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过设置位移的方式默认00000 从左边依次为vip, experience, silver, gold, cool</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">vip= <span class="number">1</span></span><br><span class="line">experience = (<span class="number">1</span> &lt;&lt; <span class="number">1</span>)</span><br><span class="line">silver = (<span class="number">1</span> &lt;&lt; <span class="number">2</span>)</span><br><span class="line">gold= (<span class="number">1</span> &lt;&lt; <span class="number">3</span>)</span><br><span class="line">cool= (<span class="number">1</span> &lt;&lt; <span class="number">4</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// setFlag用户设置用户开通了哪些权限</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setFlag</span><span class="params">(user users, isSet <span class="keyword">bool</span>, typeFlag <span class="keyword">uint8</span>)</span> <span class="title">users</span></span> &#123;</span><br><span class="line"> <span class="keyword">if</span> isSet == <span class="literal">true</span> &#123;</span><br><span class="line">user.flag = user.flag | typeFlag</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">user.flag = user.flag ^ typeFlag</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> user</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// isFlag 用于判断用户是否开通某项特权</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isFlag</span><span class="params">(user users, typeFlag <span class="keyword">uint8</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">result := user.flag &amp; typeFlag</span><br><span class="line"><span class="keyword">return</span> result == typeFlag</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">binaryTest</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> user users</span><br><span class="line">user.name = <span class="string">&quot;gopher&quot;</span></span><br><span class="line">user.flag = <span class="number">0</span></span><br><span class="line"><span class="comment">// 判断该用户是否为vip</span></span><br><span class="line">result := isFlag(user, vip)</span><br><span class="line">fmt.Printf(<span class="string">&quot;user is Vip: %t\n&quot;</span>, result)</span><br><span class="line"><span class="comment">// 给用户开通vip, 并查看用户信息里是否已开通</span></span><br><span class="line">user = setFlag(user, <span class="literal">true</span>, vip)</span><br><span class="line">result = isFlag(user, vip)</span><br><span class="line">fmt.Printf(<span class="string">&quot;user is Vip: %t\n&quot;</span>, result)</span><br><span class="line"><span class="comment">// 给用户取消vip, 并查看用户信息里是否还是vip</span></span><br><span class="line">user = setFlag(user, <span class="literal">false</span>, vip)</span><br><span class="line">result = isFlag(user, vip)</span><br><span class="line">fmt.Printf(<span class="string">&quot;user is Vip: %t\n&quot;</span>, result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> binaryTest()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码一种非常常见的用法，当新添加各种特权的时候只需要在最开始定义的常亮那里添加一行代码即可，就可以直接实现对这种特权的设置和取消，以及查看是否开通。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前学习语言一直忽略的就是所有语言中关于位操作，觉得用处并不多，可能用到也非常简单的用法，但是其实它们的作用还是非常大的。以下是一些Golang位操作符的基础：&lt;/p&gt;</summary>
    
    
    
    <category term="Golang" scheme="https://abnerwei.com/categories/golang/"/>
    
    
    <category term="Golang" scheme="https://abnerwei.com/tags/golang/"/>
    
    <category term="调度反射" scheme="https://abnerwei.com/tags/%E8%B0%83%E5%BA%A6%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Swoft Task消息投递问题</title>
    <link href="https://abnerwei.com/post/b5906eb1"/>
    <id>https://abnerwei.com/post/b5906eb1</id>
    <published>2019-03-15T08:21:21.000Z</published>
    <updated>2019-03-15T08:21:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天，线上环境因一个SQL查询结果错误，出现大量推送消息。消息投递功能使用的是swoft的任务投递功能，所以特意来看下swoft源码，Swoft的任务功能基于Swoole的Task机制,或者说Swoft的Task机制本质就是对SwooleTask机制的封装和加强。</p><span id="more"></span><h3 id="任务投递"><a href="#任务投递" class="headerlink" title="任务投递"></a>任务投递</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Swoft\Task\Task.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Deliver coroutine or async task</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $taskName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $methodName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array  $params</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int    $timeout</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool|array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> TaskException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">deliver</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$taskName</span>, <span class="keyword">string</span> <span class="variable">$methodName</span>, <span class="keyword">array</span> <span class="variable">$params</span> = [], <span class="keyword">string</span> <span class="variable">$type</span> = <span class="built_in">self</span>::TYPE_CO, <span class="variable">$timeout</span> = <span class="number">3</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$data</span>   = TaskHelper::pack(<span class="variable">$taskName</span>, <span class="variable">$methodName</span>, <span class="variable">$params</span>, <span class="variable">$type</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!App::isWorkerStatus() &amp;&amp; !App::isCoContext())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">self</span>::deliverByQueue(<span class="variable">$data</span>);<span class="comment">//见下文Command章节</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!App::isWorkerStatus() &amp;&amp; App::isCoContext())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TaskException(<span class="string">&#x27;Please deliver task by http!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable">$server</span> = App::<span class="variable">$server</span>-&gt;getServer();</span><br><span class="line">        <span class="comment">// Delier coroutine task</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$type</span> == <span class="built_in">self</span>::TYPE_CO) &#123;</span><br><span class="line">            <span class="variable">$tasks</span>[<span class="number">0</span>]  = <span class="variable">$data</span>;</span><br><span class="line">            <span class="variable">$prifleKey</span> = <span class="string">&#x27;task&#x27;</span> . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$taskName</span> . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$methodName</span>;</span><br><span class="line"></span><br><span class="line">            App::profileStart(<span class="variable">$prifleKey</span>);</span><br><span class="line">            <span class="variable">$result</span> = <span class="variable">$server</span>-&gt;taskCo(<span class="variable">$tasks</span>, <span class="variable">$timeout</span>);</span><br><span class="line">            App::profileEnd(<span class="variable">$prifleKey</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Deliver async task</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$server</span>-&gt;task(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>任务投递<code>Task::deliver()</code>将调用参数打包后根据<code>$type</code>参数通过swoole的<code>$server-&gt;taskCo()</code>或<code>$server-&gt;task()</code>接口投递到Task进程。<br>Task本身始终是同步执行的,<code>$type</code>仅仅影响投递这一操作的行为，<code>Task::TYPE_ASYNC</code>对应的<code>$server-&gt;task()</code>是异步投递，<code>Task::deliver()</code>调用后马上返回；<code>Task::TYPE_CO</code>对应的<code>$server-&gt;taskCo()</code>是协程投递，投递后让出协程控制，任务完成或执行超时后<code>Task::deliver()</code>才从协程返回。</p><h3 id="任务执行"><a href="#任务执行" class="headerlink" title="任务执行"></a>任务执行</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Swoft\Task\Bootstrap\Listeners\TaskEventListener </span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The listener of swoole task</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SwooleListener</span>(&#123;</span></span><br><span class="line"><span class="comment"> *     SwooleEvent::ON_TASK,</span></span><br><span class="line"><span class="comment"> *     SwooleEvent::ON_FINISH,</span></span><br><span class="line"><span class="comment"> * &#125;)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskEventListener</span> <span class="keyword">implements</span> <span class="title">TaskInterface</span>, <span class="title">FinishInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> \Swoole\Server $server</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int            $taskId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int            $workerId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mixed          $data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \InvalidArgumentException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onTask</span>(<span class="params">Server <span class="variable">$server</span>, <span class="keyword">int</span> <span class="variable">$taskId</span>, <span class="keyword">int</span> <span class="variable">$workerId</span>, <span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/* <span class="doctag">@var</span> TaskExecutor $taskExecutor*/</span></span><br><span class="line">            <span class="variable">$taskExecutor</span> = App::getBean(TaskExecutor::class);</span><br><span class="line">            <span class="variable">$result</span> = <span class="variable">$taskExecutor</span>-&gt;run(<span class="variable">$data</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (\<span class="built_in">Throwable</span> <span class="variable">$throwable</span>) &#123;</span><br><span class="line">            App::error(sprintf(<span class="string">&#x27;TaskExecutor-&gt;run %s file=%s line=%d &#x27;</span>, <span class="variable">$throwable</span>-&gt;getMessage(), <span class="variable">$throwable</span>-&gt;getFile(), <span class="variable">$throwable</span>-&gt;getLine()));</span><br><span class="line">            <span class="variable">$result</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Release system resources</span></span><br><span class="line">            App::trigger(AppEvent::RESOURCE_RELEASE);</span><br><span class="line"></span><br><span class="line">            App::trigger(TaskEvent::AFTER_TASK);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处是<code>swoole.onTask</code>的事件回调，其职责仅仅是将将worker进程投递来的打包后的数据转发给<code>TaskExecutor</code>。</p><p>Swoole的Task机制的本质是worker进程将耗时任务投递给同步的Task(又名TaskWorker)进程处理,所以<code>swoole.onTask</code>的事件回调是在Task进程中执行的。上文说过,worker进程是你大部分http服务代码执行的环境，但是从<code>TaskEventListener.onTask()</code>方法开始，代码的执行环境都是Task进程，也就是说，<strong>TaskExecutor和具体的TaskBean都是执行在Task进程中的。</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Swoft\Task\TaskExecutor</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The task executor</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Bean</span>()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskExecutor</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = TaskHelper::unpack(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$name</span>   = <span class="variable">$data</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">        <span class="variable">$type</span>   = <span class="variable">$data</span>[<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line">        <span class="variable">$method</span> = <span class="variable">$data</span>[<span class="string">&#x27;method&#x27;</span>];</span><br><span class="line">        <span class="variable">$params</span> = <span class="variable">$data</span>[<span class="string">&#x27;params&#x27;</span>];</span><br><span class="line">        <span class="variable">$logid</span>  = <span class="variable">$data</span>[<span class="string">&#x27;logid&#x27;</span>] ?? uniqid(<span class="string">&#x27;&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="variable">$spanid</span> = <span class="variable">$data</span>[<span class="string">&#x27;spanid&#x27;</span>] ?? <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable">$collector</span> = TaskCollector::getCollector();</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$collector</span>[<span class="string">&#x27;task&#x27;</span>][<span class="variable">$name</span>])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">list</span>(, <span class="variable">$coroutine</span>) = <span class="variable">$collector</span>[<span class="string">&#x27;task&#x27;</span>][<span class="variable">$name</span>];</span><br><span class="line">        <span class="variable">$task</span> = App::getBean(<span class="variable">$name</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$coroutine</span>) &#123;</span><br><span class="line">            <span class="variable">$result</span> = <span class="keyword">$this</span>-&gt;runCoTask(<span class="variable">$task</span>, <span class="variable">$method</span>, <span class="variable">$params</span>, <span class="variable">$logid</span>, <span class="variable">$spanid</span>, <span class="variable">$name</span>, <span class="variable">$type</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$result</span> = <span class="keyword">$this</span>-&gt;runSyncTask(<span class="variable">$task</span>, <span class="variable">$method</span>, <span class="variable">$params</span>, <span class="variable">$logid</span>, <span class="variable">$spanid</span>, <span class="variable">$name</span>, <span class="variable">$type</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>任务执行思路很简单，将Worker进程发过来的数据解包还原成原来的调用参数，根据<code>$name</code>参数找到对应的TaskBean并调用其对应的Task方法。其中TaskBean使用类级别注解<code>@Task(name=&quot;TaskName&quot;)</code>或者<code>@Task(&quot;TaskName&quot;)</code>声明。</p><p>值得一提的一点是，<code>@Task</code>注解除了name属性，还有一个coroutine属性，上述代码会根据该参数选择使用协程的<code>runCoTask()</code>或者同步的<code>runSyncTask()</code>执行Task。<strong>但是由于而且由于Swoole的Task进程的执行是完全同步的，不支持协程，所以目前版本请该参数不要配置为true。同样的在TaskBean中编写的任务代码必须的同步的或者是要能根据环境自动将异步和协程降级为同步的</strong></p><h3 id="从Process中投递任务"><a href="#从Process中投递任务" class="headerlink" title="从Process中投递任务"></a>从Process中投递任务</h3><blockquote><p>Swoole的Task机制的本质是worker进程将耗时任务投递给同步的Task进程(又名TaskWorker进程)处理。</p></blockquote><p>换句话说，swoole的<code>$server-&gt;taskCo()</code>或<code>$server-&gt;task()</code>都只能在worker进程中使用。<br>这个限制大大的限制了使用场景。 如何能够为了能够在Process中投递任务呢？Swoft为了绕过这个限制提供了<code>Task::deliverByProcess()</code>方法。其实现原理也很简单，通过Swoole的<code>$server-&gt;sendMessage()</code>方法将调用信息从Process中投递到Worker进程中，然后由Worker进程替其投递到Task进程当中，相关代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Swoft\Task\Task.php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Deliver task by process</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> string $taskName</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> string $methodName</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> array  $params</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> string $type</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> int    $timeout</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> int    $workId</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">deliverByProcess</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$taskName</span>, <span class="keyword">string</span> <span class="variable">$methodName</span>, <span class="keyword">array</span> <span class="variable">$params</span> = [], <span class="keyword">int</span> <span class="variable">$timeout</span> = <span class="number">3</span>, <span class="keyword">int</span> <span class="variable">$workId</span> = <span class="number">0</span>, <span class="keyword">string</span> <span class="variable">$type</span> = <span class="built_in">self</span>::TYPE_ASYNC</span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* <span class="doctag">@var</span> PipeMessageInterface $pipeMessage */</span></span><br><span class="line">  <span class="variable">$server</span>      = App::<span class="variable">$server</span>-&gt;getServer();</span><br><span class="line">  <span class="variable">$pipeMessage</span> = App::getBean(PipeMessage::class);</span><br><span class="line">  <span class="variable">$data</span> = [</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>    =&gt; <span class="variable">$taskName</span>,</span><br><span class="line">    <span class="string">&#x27;method&#x27;</span>  =&gt; <span class="variable">$methodName</span>,</span><br><span class="line">    <span class="string">&#x27;params&#x27;</span>  =&gt; <span class="variable">$params</span>,</span><br><span class="line">    <span class="string">&#x27;timeout&#x27;</span> =&gt; <span class="variable">$timeout</span>,</span><br><span class="line">    <span class="string">&#x27;type&#x27;</span>    =&gt; <span class="variable">$type</span>,</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="variable">$message</span> = <span class="variable">$pipeMessage</span>-&gt;pack(PipeMessage::MESSAGE_TYPE_TASK, <span class="variable">$data</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$server</span>-&gt;sendMessage(<span class="variable">$message</span>, <span class="variable">$workId</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据打包后使用<code>$server-&gt;sendMessage()</code>投递给woerker:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Swoft\Bootstrap\Server\ServerTrait.php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* onPipeMessage event callback</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> \Swoole\Server $server</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> int            $srcWorkerId</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> string         $message</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> \InvalidArgumentException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onPipeMessage</span>(<span class="params">Server <span class="variable">$server</span>, <span class="keyword">int</span> <span class="variable">$srcWorkerId</span>, <span class="keyword">string</span> <span class="variable">$message</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* <span class="doctag">@var</span> PipeMessageInterface $pipeMessage */</span></span><br><span class="line">  <span class="variable">$pipeMessage</span> = App::getBean(PipeMessage::class);</span><br><span class="line">  <span class="keyword">list</span>(<span class="variable">$type</span>, <span class="variable">$data</span>) = <span class="variable">$pipeMessage</span>-&gt;unpack(<span class="variable">$message</span>);</span><br><span class="line"></span><br><span class="line">  App::trigger(AppEvent::PIPE_MESSAGE, <span class="literal">null</span>, <span class="variable">$type</span>, <span class="variable">$data</span>, <span class="variable">$srcWorkerId</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$server-&gt;sendMessage</code>后,worker进程收到数据时会触发一个<code>swoole.pipeMessage</code>事件的回调，Swoft会将其转换成自己的<code>swoft.pipeMessage</code>事件并触发.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Swoft\Task\Event\Listeners\PipeMessageListener.php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The pipe message listener</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Listener</span>(event=AppEvent::PIPE_MESSAGE)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PipeMessageListener</span> <span class="keyword">implements</span> <span class="title">EventHandlerInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> \Swoft\Event\EventInterface $event</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">EventInterface <span class="variable">$event</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$params</span> = <span class="variable">$event</span>-&gt;getParams();</span><br><span class="line">        <span class="keyword">if</span> (count(<span class="variable">$params</span>) &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$type</span>, <span class="variable">$data</span>, <span class="variable">$srcWorkerId</span>) = <span class="variable">$params</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$type</span> != PipeMessage::MESSAGE_TYPE_TASK) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$type</span>       = <span class="variable">$data</span>[<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line">        <span class="variable">$taskName</span>   = <span class="variable">$data</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">        <span class="variable">$params</span>     = <span class="variable">$data</span>[<span class="string">&#x27;params&#x27;</span>];</span><br><span class="line">        <span class="variable">$timeout</span>    = <span class="variable">$data</span>[<span class="string">&#x27;timeout&#x27;</span>];</span><br><span class="line">        <span class="variable">$methodName</span> = <span class="variable">$data</span>[<span class="string">&#x27;method&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// delever task</span></span><br><span class="line">        Task::deliver(<span class="variable">$taskName</span>, <span class="variable">$methodName</span>, <span class="variable">$params</span>, <span class="variable">$type</span>, <span class="variable">$timeout</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>swoft.pipeMessage</code>事件最终由<code>PipeMessageListener</code>处理。在相关的监听其中，如果发现<code>swoft.pipeMessage</code>事件由<code>Task::deliverByProcess()</code>产生的，worker进程会替其执行一次<code>Task::deliver()</code>，最终将任务数据投递到TaskWorker进程中。</p><p>回顾一下整个流程：从<code>Task::deliverByProcess()</code>到某TaskBean 最终执行任务，经历了哪些进程，而调用链的哪些部分又分别是在哪些进程中执行？</p><h4 id="从Command进程或其子进程中投递任务"><a href="#从Command进程或其子进程中投递任务" class="headerlink" title="从Command进程或其子进程中投递任务"></a>从Command进程或其子进程中投递任务</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Swoft\Task\QueueTask.php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> string $data</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> int    $taskWorkerId</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> int    $srcWorkerId</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deliver</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$data</span>, <span class="keyword">int</span> <span class="variable">$taskWorkerId</span> = <span class="literal">null</span>, <span class="variable">$srcWorkerId</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$taskWorkerId</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="variable">$taskWorkerId</span> = mt_rand(<span class="keyword">$this</span>-&gt;workerNum + <span class="number">1</span>, <span class="keyword">$this</span>-&gt;workerNum + <span class="keyword">$this</span>-&gt;taskNum);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$srcWorkerId</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="variable">$srcWorkerId</span> = mt_rand(<span class="number">0</span>, <span class="keyword">$this</span>-&gt;workerNum - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">$this</span>-&gt;check();</span><br><span class="line">  <span class="variable">$data</span>   = <span class="keyword">$this</span>-&gt;pack(<span class="variable">$data</span>, <span class="variable">$srcWorkerId</span>);</span><br><span class="line">  <span class="variable">$result</span> = \msg_send(<span class="keyword">$this</span>-&gt;queueId, <span class="variable">$taskWorkerId</span>, <span class="variable">$data</span>, <span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable">$result</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于Command进程的任务投递，情况会更复杂一点。<br>上文提到的Process，其往往衍生于Http/Rpc服务，作为同一个Manger的子孙进程，他们能够拿到Swoole\Server的句柄变量，从而通过<code>$server-&gt;sendMessage()</code>,<code>$server-&gt;task()</code>等方法进行任务投递。</p><p>但在Swoft的体系中，还有一个特殊进程： <strong>Command</strong>。<br>Command的进程从shell或cronb独立启动，和Http/Rpc服务相关的进程没有亲缘关系。因此Command进程以及从Command中启动的Process进程是没有办法拿到Swoole\server的调用句柄直接通过UnixSocket进行任务投递的。<br>为了为这种进程提供任务投递支持，Swoft利用了Swoole的Task进程的一个特殊功能—-消息队列。</p><p><img src="https://ae01.alicdn.com/kf/HTB1R6vsTgHqK1RjSZFP763wapXaJ.png" alt="任务投递"></p><p>同一个项目中Command和Http\RpcServer 通过约定一个<code>message_queue_key</code>获取到系统内核中的同一条消息队列，然后Comand进程就可以通过该消息队列向Task进程投递任务了。<br>该机制没有提供对外的公开方法，仅仅被包含在<code>Task::deliver()</code>方法中，Swoft会根据当前环境隐式切换投递方式。但该消息队列的实现依赖<code>Semaphore拓展</code>，如果想使用，需要在编译PHP时加上<code>--enable-sysvmsg</code>参数。</p><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><p>除了手动执行的普通任务，Swoft还提供了精度为秒的定时任务功能用来在项目中替代Linux的Crontab功能.</p><p>Swoft用两个前置Process—任务计划进程：<code>CronTimerProcess</code>和任务执行进程<code>CronExecProcess</code><br>，和两张内存数据表—–<code>RunTimeTable</code>（<strong>任务(配置)表</strong>）<code>OriginTable</code>（<strong>（任务）执行表</strong>）用于定时任务的管理调度。<br>两张表的每行记录的结构如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">\\Swoft\Task\Crontab\TableCrontab.php</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任务表，记录用户配置的任务信息</span></span><br><span class="line"><span class="comment">     * 表每行记录包含的字段如下,其中`rule`,`taskClass`,`taskMethod`生成key唯一确定一条记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array $originStruct </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$originStruct</span> = [</span><br><span class="line">  <span class="string">&#x27;rule&#x27;</span>       =&gt; [\Swoole\Table::TYPE_STRING, <span class="number">100</span>],<span class="comment">//定时任务执行规则，对应@Scheduled注解的cron属性</span></span><br><span class="line">  <span class="string">&#x27;taskClass&#x27;</span>  =&gt; [\Swoole\Table::TYPE_STRING, <span class="number">255</span>],<span class="comment">//任务名 对应@Task的name属性(默认为类名)</span></span><br><span class="line">  <span class="string">&#x27;taskMethod&#x27;</span> =&gt; [\Swoole\Table::TYPE_STRING, <span class="number">255</span>],<span class="comment">//Task方法，对应@Scheduled注解所在方法</span></span><br><span class="line">  <span class="string">&#x27;add_time&#x27;</span>   =&gt; [\Swoole\Table::TYPE_STRING, <span class="number">11</span>],<span class="comment">//初始化该表内容时的10位时间戳</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行表，记录短时间内要执行的任务列表及其执行状态</span></span><br><span class="line"><span class="comment">     * 表每行记录包含的字段如下,其中`taskClass`,`taskMethod`,`minute`,`sec`生成key唯一确定一条记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array $runTimeStruct </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$runTimeStruct</span> = [</span><br><span class="line">  <span class="string">&#x27;taskClass&#x27;</span>  =&gt; [\Swoole\Table::TYPE_STRING, <span class="number">255</span>],<span class="comment">//同上</span></span><br><span class="line">  <span class="string">&#x27;taskMethod&#x27;</span> =&gt; [\Swoole\Table::TYPE_STRING, <span class="number">255</span>],<span class="comment">//同上</span></span><br><span class="line">  <span class="string">&#x27;minute&#x27;</span>      =&gt; [\Swoole\Table::TYPE_STRING, <span class="number">20</span>],<span class="comment">//需要执行任务的时间，精确到分钟 格式date(&#x27;YmdHi&#x27;)</span></span><br><span class="line">  <span class="string">&#x27;sec&#x27;</span>        =&gt; [\Swoole\Table::TYPE_STRING, <span class="number">20</span>],<span class="comment">//需要执行任务的时间，精确到分钟 10位时间戳</span></span><br><span class="line">  <span class="string">&#x27;runStatus&#x27;</span>  =&gt; [\Swoole\TABLE::TYPE_INT, <span class="number">4</span>],<span class="comment">//任务状态，有 0(未执行)  1(已执行)  2（执行中） 三种。 </span></span><br><span class="line">  <span class="comment">//注意：这里的执行是一个容易误解的地方，此处的执行并不是指任务本身的执行，而是值`任务投递`这一操作的执行，从宏观上看换成 _未投递_,_已投递_，_投递中_描述会更准确。</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><h4 id="此处为何要使用Swoole的内存Table"><a href="#此处为何要使用Swoole的内存Table" class="headerlink" title="此处为何要使用Swoole的内存Table?"></a>此处为何要使用Swoole的内存Table?</h4><p>Swoft的的定时任务管理是分别由 <strong>任务计划进程</strong>和 <strong>任务执行进程</strong>进程负责的。两个进程的运行共同管理定时任务，如果使用进程间独立的<code>array()</code>等结构，两个进程必然需要频繁的进程间通信。而使用跨进程的Table(本文的Table,除非特别说明，都指Swoole的<code>Swoole\Table</code>结构)直接进行进程间数据共享，不仅性能高，操作简单 还解耦了两个进程。</p><p>为了Table能够在两个进程间共同使用,Table必须在Swoole Server启动前创建并分配内存。具体实现在<code>Swoft\Task\Bootstrap\Listeners-&gt;onBeforeStart()</code>中，比较简单。</p><p>查看这两个定时任务进程的行为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Swoft\Task\Bootstrap\Process\CronTimerProcess.php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Crontab timer process</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Process</span>(name=&quot;cronTimer&quot;, boot=true)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CronTimerProcess</span> <span class="keyword">implements</span> <span class="title">ProcessInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> \Swoft\Process\Process $process</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">SwoftProcess <span class="variable">$process</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//code....</span></span><br><span class="line">        <span class="comment">/* <span class="doctag">@var</span> \Swoft\Task\Crontab\Crontab $cron*/</span></span><br><span class="line">        <span class="variable">$cron</span> = App::getBean(<span class="string">&#x27;crontab&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Swoole/HttpServer</span></span><br><span class="line">        <span class="variable">$server</span> = App::<span class="variable">$server</span>-&gt;getServer();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$time</span> = (<span class="number">60</span> - date(<span class="string">&#x27;s&#x27;</span>)) * <span class="number">1000</span>;</span><br><span class="line">        <span class="variable">$server</span>-&gt;after(<span class="variable">$time</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$server</span>, <span class="variable">$cron</span></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// Every minute check all tasks, and prepare the tasks that next execution point needs</span></span><br><span class="line">            <span class="variable">$cron</span>-&gt;checkTask();</span><br><span class="line">            <span class="variable">$server</span>-&gt;tick(<span class="number">60</span> * <span class="number">1000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$cron</span></span>) </span>&#123;</span><br><span class="line">                <span class="variable">$cron</span>-&gt;checkTask();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Swoft\Task\Crontab\Crontab.php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化runTimeTable数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $task        任务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $parseResult 解析crontab命令规则结果，即Task需要在当前分钟内的哪些秒执行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">initRunTimeTableData</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$task</span>, <span class="keyword">array</span> <span class="variable">$parseResult</span></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="variable">$runTimeTableTasks</span> = <span class="keyword">$this</span>-&gt;getRunTimeTable()-&gt;table;</span><br><span class="line"></span><br><span class="line">  <span class="variable">$min</span> = date(<span class="string">&#x27;YmdHi&#x27;</span>);</span><br><span class="line">  <span class="variable">$sec</span> = strtotime(date(<span class="string">&#x27;Y-m-d H:i&#x27;</span>));</span><br><span class="line">  <span class="keyword">foreach</span> (<span class="variable">$parseResult</span> <span class="keyword">as</span> <span class="variable">$time</span>) &#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;checkTaskQueue(<span class="literal">false</span>);</span><br><span class="line">    <span class="variable">$key</span> = <span class="keyword">$this</span>-&gt;getKey(<span class="variable">$task</span>[<span class="string">&#x27;rule&#x27;</span>], <span class="variable">$task</span>[<span class="string">&#x27;taskClass&#x27;</span>], <span class="variable">$task</span>[<span class="string">&#x27;taskMethod&#x27;</span>], <span class="variable">$min</span>, <span class="variable">$time</span> + <span class="variable">$sec</span>);</span><br><span class="line">    <span class="variable">$runTimeTableTasks</span>-&gt;set(<span class="variable">$key</span>, [</span><br><span class="line">      <span class="string">&#x27;taskClass&#x27;</span>  =&gt; <span class="variable">$task</span>[<span class="string">&#x27;taskClass&#x27;</span>],</span><br><span class="line">      <span class="string">&#x27;taskMethod&#x27;</span> =&gt; <span class="variable">$task</span>[<span class="string">&#x27;taskMethod&#x27;</span>],</span><br><span class="line">      <span class="string">&#x27;minute&#x27;</span>     =&gt; <span class="variable">$min</span>,</span><br><span class="line">      <span class="string">&#x27;sec&#x27;</span>        =&gt; <span class="variable">$time</span> + <span class="variable">$sec</span>,</span><br><span class="line">      <span class="string">&#x27;runStatus&#x27;</span>  =&gt; <span class="built_in">self</span>::NORMAL</span><br><span class="line">    ]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CronTimerProcess</code>是Swoft的定时任务调度进程，其核心方法是<code>Crontab-&gt;initRunTimeTableData()</code>。<br>该进程使用了Swoole的定时器功能，通过<code>Swoole\Timer</code>在每分钟首秒时执行的回调，<code>CronTimerProcess</code>每次被唤醒后都会遍历<code>任务表</code>计算出当前这一分钟内的60秒分别需要执行的任务清单，写入<strong>执行表</strong>并标记为 <strong>未执行</strong>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Swoft\Task\Bootstrap\Process</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Crontab process</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Process</span>(name=&quot;cronExec&quot;, boot=true)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CronExecProcess</span> <span class="keyword">implements</span> <span class="title">ProcessInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> \Swoft\Process\Process $process</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">SwoftProcess <span class="variable">$process</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$pname</span> = App::<span class="variable">$server</span>-&gt;getPname();</span><br><span class="line">        <span class="variable">$process</span>-&gt;name(sprintf(<span class="string">&#x27;%s cronexec process&#x27;</span>, <span class="variable">$pname</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** <span class="doctag">@var</span> \Swoft\Task\Crontab\Crontab $cron */</span></span><br><span class="line">        <span class="variable">$cron</span> = App::getBean(<span class="string">&#x27;crontab&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Swoole/HttpServer</span></span><br><span class="line">        <span class="variable">$server</span> = App::<span class="variable">$server</span>-&gt;getServer();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$server</span>-&gt;tick(<span class="number">0.5</span> * <span class="number">1000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$cron</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable">$tasks</span> = <span class="variable">$cron</span>-&gt;getExecTasks();</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$tasks</span>)) &#123;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable">$tasks</span> <span class="keyword">as</span> <span class="variable">$task</span>) &#123;</span><br><span class="line">                    <span class="comment">// Diliver task</span></span><br><span class="line">                    Task::deliverByProcess(<span class="variable">$task</span>[<span class="string">&#x27;taskClass&#x27;</span>], <span class="variable">$task</span>[<span class="string">&#x27;taskMethod&#x27;</span>]);</span><br><span class="line">                    <span class="variable">$cron</span>-&gt;finishTask(<span class="variable">$task</span>[<span class="string">&#x27;key&#x27;</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CronExecProcess</code>作为定时任务的执行者，通过<code>Swoole\Timer</code>每0.5s唤醒自身一次，然后把 执行表 遍历一次，选取当下需要执行的任务，通过<code>sendMessage()</code>投递出去并更新该 任务执行表中的状态。<br>该执行进程只负责任务的投递，任务的实际实际执行仍然在Task进程中由TaskExecutor处理。</p><p>定时任务的宏观执行情况如下：</p><p><img src="https://ae01.alicdn.com/kf/HTB1Y0jsTXzqK1RjSZFo762fcXXaX.png" alt="定时任务机制"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天，线上环境因一个SQL查询结果错误，出现大量推送消息。消息投递功能使用的是swoft的任务投递功能，所以特意来看下swoft源码，Swoft的任务功能基于Swoole的Task机制,或者说Swoft的Task机制本质就是对SwooleTask机制的封装和加强。&lt;/p&gt;</summary>
    
    
    
    <category term="源码解读" scheme="https://abnerwei.com/categories/%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    
    
    <category term="Swoole" scheme="https://abnerwei.com/tags/swoole/"/>
    
    <category term="Swoft" scheme="https://abnerwei.com/tags/swoft/"/>
    
    <category term="PHP" scheme="https://abnerwei.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>怎么理解分布式、高并发、多线程</title>
    <link href="https://abnerwei.com/post/fa9395a4"/>
    <id>https://abnerwei.com/post/fa9395a4</id>
    <published>2019-03-15T04:22:21.000Z</published>
    <updated>2019-03-15T04:22:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>当问到高并发系统可以采用哪些手段来解决，或者被问到分布式系统如何解决一致性的问题，如何准确说出区别与误区？</p><p>三者容易混淆，误以为所谓的分布式高并发的系统就是能同时供海量用户访问，而采用多线程手段不就是可以提供系统的并发能力吗？实际上，<strong>三个总是相伴而生，但侧重点又有不同。</strong></p><span id="more"></span><h3 id="什么是分布式"><a href="#什么是分布式" class="headerlink" title="什么是分布式?"></a>什么是分布式?</h3><p>分布式更多的一个概念，<strong>是为了解决单个物理服务器容量和性能瓶颈问题而采用的优化手段</strong>。分布式需要解决的问题较多，在不同的技术层面上，又包括：分布式文件系统、分布式缓存、分布式数据库、分布式计算等，一些名词如Hadoop、zookeeper、MQ等都跟分布式有关。从理念上讲，分布式的实现有两种形式：</p><p><strong>水平扩展：</strong>当一台机器扛不住流量时，就通过添加机器的方式，将流量平分到所有服务器上，所有机器都可以提供相当的服务；</p><p><strong>垂直拆分：</strong>前端有多种查询需求时，一台机器扛不住，可以将不同的需求分发到不同的机器上，比如A机器处理余票查询的请求，B机器处理支付的请求。</p><h3 id="什么是高并发"><a href="#什么是高并发" class="headerlink" title="什么是高并发?"></a>什么是高并发?</h3><p><strong>相对于分布式来讲，高并发在解决的问题上会集中一些，其反应的是同时有多少量的问题</strong>：比如在线直播服务，同时有上万人观看。</p><p>高并发可以通过分布式技术去解决，将并发流量分到不同的物理服务器上。但除此之外，还可以有很多其他优化手段：比如使用缓存系统，将所有的，静态内容放到CDN等；还可以使用多线程技术将一台服务器的服务能力最大化。</p><p><img src="https://ae01.alicdn.com/kf/HTB1lYvSThjaK1RjSZKz760VwXXai.png" alt="高并发"></p><h3 id="什么是多线程"><a href="#什么是多线程" class="headerlink" title="什么是多线程?"></a>什么是多线程?</h3><p><strong>多线程是指从软件或者硬件上实现多个线程并发执行的技术</strong>，它更多的是解决CPU调度多个进程的问题，从而让这些进程看上去是同时执行（实际是交替运行的）。</p><p>这几个概念中，<strong>多线程解决的问题是最明确的，手段也是比较单一的，基本上遇到的最大问题就是线程安全</strong>。Golang中采用轻量的协程(goroutine)进行处理并发，可充分利用CPU多核性能。</p><p><strong>总结：</strong> </p><p>●分布式是从物理资源的角度去将不同的机器组成一个整体对外服务，技术范围非常广且难度非常大，有了这个基础，高并发、高吞吐等系统很容易构建；</p><p>●高并发是从业务角度去描述系统的能力，实现高并发的手段可以采用分布式，也可以采用诸如缓存、CDN等，当然也包括多线程；</p><p>●多线程则聚焦于如何使用编程语言将CPU调度能力最大化。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;当问到高并发系统可以采用哪些手段来解决，或者被问到分布式系统如何解决一致性的问题，如何准确说出区别与误区？&lt;/p&gt;
&lt;p&gt;三者容易混淆，误以为所谓的分布式高并发的系统就是能同时供海量用户访问，而采用多线程手段不就是可以提供系统的并发能力吗？实际上，&lt;strong&gt;三个总是相伴而生，但侧重点又有不同。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="名词释义" scheme="https://abnerwei.com/categories/%E5%90%8D%E8%AF%8D%E9%87%8A%E4%B9%89/"/>
    
    
    <category term="分布式" scheme="https://abnerwei.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    <category term="高并发" scheme="https://abnerwei.com/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    <category term="多线程" scheme="https://abnerwei.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Golang slice &amp; string 重用</title>
    <link href="https://abnerwei.com/post/b891c9b0"/>
    <id>https://abnerwei.com/post/b891c9b0</id>
    <published>2019-01-12T15:30:21.000Z</published>
    <updated>2019-01-12T15:30:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>相比于 c/c++，golang 的一个很大的改进就是引入了 gc 机制，不再需要用户自己管理内存，大大减少了程序由于内存泄露而引入的 bug，但是同时 gc 也带来了额外的性能开销，有时甚至会因为使用不当，导致 gc 成为性能瓶颈，所以使用golang开发的时候，应注意对象的重用，以减少 gc 的压力。</p><span id="more"></span><h3 id="slice-和-string-内部结构"><a href="#slice-和-string-内部结构" class="headerlink" title="slice 和 string 内部结构"></a>slice 和 string 内部结构</h3><p>slice 和 string 的内部结构可以在 <code>$GOROOT/src/reflect/value.go</code> 里面找到</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> StringHeader <span class="keyword">struct</span> &#123;</span><br><span class="line">    Data <span class="keyword">uintptr</span></span><br><span class="line">    Len  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> SliceHeader <span class="keyword">struct</span> &#123;</span><br><span class="line">    Data <span class="keyword">uintptr</span></span><br><span class="line">    Len  <span class="keyword">int</span></span><br><span class="line">    Cap  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到一个 string 包含一个数据指针和一个长度，长度是不可变的</p><p>slice 包含一个数据指针、一个长度和一个容量，当容量不够时会重新申请新的内存，Data 指针将指向新的地址，原来的地址空间将被释放</p><p>从这些结构就可以看出，string 和 slice 的赋值，包括当做参数传递，和自定义的结构体一样，都仅仅是 Data 指针的浅拷贝</p><h3 id="slice-重用"><a href="#slice-重用" class="headerlink" title="slice 重用"></a>slice 重用</h3><h4 id="append-操作"><a href="#append-操作" class="headerlink" title="append 操作"></a>append 操作</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">si1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">si2 := si1</span><br><span class="line">si2 = <span class="built_in">append</span>(si2, <span class="number">0</span>)</span><br><span class="line">Convey(<span class="string">&quot;需要重新分配内存&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    header1 := (*reflect.SliceHeader)(unsafe.Pointer(&amp;si1))</span><br><span class="line">    header2 := (*reflect.SliceHeader)(unsafe.Pointer(&amp;si2))</span><br><span class="line">    fmt.Println(header1.Data)</span><br><span class="line">    fmt.Println(header2.Data)</span><br><span class="line">    So(header1.Data, ShouldNotEqual, header2.Data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>si1 和 si2 开始都指向同一个数组，当对 si2 执行 append 操作时，由于原来的 Cap 值不够了，需要重新申请新的空间，因此 Data 值发生了变化，在 <code>$GOROOT/src/reflect/value.go</code> 这个文件里面还有关于新的 cap 值的策略，在 <code>grow</code> 这个函数里面，当 cap 小于 1024 的时候，是成倍的增长，超过的时候，每次增长 25%，而这种内存增长不仅仅数据拷贝（从旧的地址拷贝到新的地址）需要消耗额外的性能，旧地址内存的释放对 gc 也会造成额外的负担，所以如果能够知道数据的长度的情况下，尽量使用<code>make([]int, len, cap)</code> 预分配内存，不知道长度的情况下，可以考虑下面的内存重用的方法</p><h4 id="内存重用"><a href="#内存重用" class="headerlink" title="内存重用"></a>内存重用</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">si1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">si2 := si1[:<span class="number">7</span>]</span><br><span class="line">Convey(<span class="string">&quot;不需要重新分配内存&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    header1 := (*reflect.SliceHeader)(unsafe.Pointer(&amp;si1))</span><br><span class="line">    header2 := (*reflect.SliceHeader)(unsafe.Pointer(&amp;si2))</span><br><span class="line">    fmt.Println(header1.Data)</span><br><span class="line">    fmt.Println(header2.Data)</span><br><span class="line">    So(header1.Data, ShouldEqual, header2.Data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Convey(<span class="string">&quot;往切片里面 append 一个值&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    si2 = <span class="built_in">append</span>(si2, <span class="number">10</span>)</span><br><span class="line">    Convey(<span class="string">&quot;改变了原 slice 的值&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        header1 := (*reflect.SliceHeader)(unsafe.Pointer(&amp;si1))</span><br><span class="line">        header2 := (*reflect.SliceHeader)(unsafe.Pointer(&amp;si2))</span><br><span class="line">        fmt.Println(header1.Data)</span><br><span class="line">        fmt.Println(header2.Data)</span><br><span class="line">        So(header1.Data, ShouldEqual, header2.Data)</span><br><span class="line">        So(si1[<span class="number">7</span>], ShouldEqual, <span class="number">10</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>si2 是 si1 的一个切片，从第一段代码可以看到切片并不重新分配内存，si2 和 si1 的 Data 指针指向同一片地址，而第二段代码可以看出，当我们往 si2 里面 append 一个新的值的时候，我们发现仍然没有内存分配，而且这个操作使得 si1 的值也发生了改变，因为两者本就是指向同一片 Data 区域，利用这个特性，我们只需要让 <code>si1 = si1[:0]</code> 就可以不断地清空 si1 的内容，实现内存的复用了</p><p><strong>PS</strong>: 可以使用 <code>copy(si2, si1)</code> 实现深拷贝</p><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Convey(<span class="string">&quot;字符串常量&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str1 := <span class="string">&quot;hello world&quot;</span></span><br><span class="line">    str2 := <span class="string">&quot;hello world&quot;</span></span><br><span class="line">    Convey(<span class="string">&quot;地址相同&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        header1 := (*reflect.StringHeader)(unsafe.Pointer(&amp;str1))</span><br><span class="line">        header2 := (*reflect.StringHeader)(unsafe.Pointer(&amp;str2))</span><br><span class="line">        fmt.Println(header1.Data)</span><br><span class="line">        fmt.Println(header2.Data)</span><br><span class="line">        So(header1.Data, ShouldEqual, header2.Data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这个例子比较简单，字符串常量使用的是同一片地址区域</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Convey(<span class="string">&quot;相同字符串的不同子串&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str1 := <span class="string">&quot;hello world&quot;</span>[:<span class="number">6</span>]</span><br><span class="line">    str2 := <span class="string">&quot;hello world&quot;</span>[:<span class="number">5</span>]</span><br><span class="line">    Convey(<span class="string">&quot;地址相同&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        header1 := (*reflect.StringHeader)(unsafe.Pointer(&amp;str1))</span><br><span class="line">        header2 := (*reflect.StringHeader)(unsafe.Pointer(&amp;str2))</span><br><span class="line">        fmt.Println(header1.Data, str1)</span><br><span class="line">        fmt.Println(header2.Data, str2)</span><br><span class="line">        So(str1, ShouldNotEqual, str2)</span><br><span class="line">        So(header1.Data, ShouldEqual, header2.Data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>相同字符串的不同子串，不会额外申请新的内存，但是要注意的是这里的相同字符串，指的是<code>str1.Data == str2.Data &amp;&amp; str1.Len == str2.Len</code>，而不是 <code>str1 == str2</code>，下面这个例子可以说明 <code>str1 == str2</code> 但是其 Data 并不相同</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Convey(<span class="string">&quot;不同字符串的相同子串&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str1 := <span class="string">&quot;hello world&quot;</span>[:<span class="number">5</span>]</span><br><span class="line">    str2 := <span class="string">&quot;hello golang&quot;</span>[:<span class="number">5</span>]</span><br><span class="line">    Convey(<span class="string">&quot;地址不同&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        header1 := (*reflect.StringHeader)(unsafe.Pointer(&amp;str1))</span><br><span class="line">        header2 := (*reflect.StringHeader)(unsafe.Pointer(&amp;str2))</span><br><span class="line">        fmt.Println(header1.Data, str1)</span><br><span class="line">        fmt.Println(header2.Data, str2)</span><br><span class="line">        So(str1, ShouldEqual, str2)</span><br><span class="line">        So(header1.Data, ShouldNotEqual, header2.Data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>实际上对于字符串，字符串是不可变的，任何字符串的操作都不会申请额外的内存（对于仅内部数据指针而言），除非这个字符串本身就是由 <code>[]byte</code> 创建而来，否则，这个字符串本身就是另一个字符串的子串（比如通过 <code>strings.Split</code> 获得的字符串），本来就不会申请额外的空间。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;相比于 c/c++，golang 的一个很大的改进就是引入了 gc 机制，不再需要用户自己管理内存，大大减少了程序由于内存泄露而引入的 bug，但是同时 gc 也带来了额外的性能开销，有时甚至会因为使用不当，导致 gc 成为性能瓶颈，所以使用golang开发的时候，应注意对象的重用，以减少 gc 的压力。&lt;/p&gt;</summary>
    
    
    
    <category term="Golang" scheme="https://abnerwei.com/categories/golang/"/>
    
    
    <category term="Golang" scheme="https://abnerwei.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>过载保护&amp;异构服务负载均衡</title>
    <link href="https://abnerwei.com/post/eae9972c"/>
    <id>https://abnerwei.com/post/eae9972c</id>
    <published>2018-12-10T12:11:19.000Z</published>
    <updated>2018-12-10T12:11:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>负载均衡</strong>是指，将请求/数据分摊到多个操作单元上执行，关键在于<strong>均衡</strong>。</p><p>然而，后端的服务器有可能硬件条件不同：</p><ul><li>如果对标低配的服务器“均匀”分摊负载，高配的服务器利用率会不足</li><li>如果对标高配的服务器“均匀”分摊负载，低配的服务器会扛不住<span id="more"></span>如何根据异构服务器的处理能力来动态、自适应进行负载均衡，以及过载保护？</li></ul><p><strong>负载均衡通常是怎么做的？</strong></p><p><img src="https://ae01.alicdn.com/kf/HTB1WcYpTmzqK1RjSZFj762lCFXam.png" alt="站点层到服务层"></p><p>service层的负载均衡，一般是通过service连接池来实现的，<strong>调用方连接池</strong>会建立与下游服务多个连接，每次请求“随机”获取连接，来保证访问的均衡性。</p><p>负载均衡、故障转移、超时处理等细节也都是通过<strong>调用方连接池</strong>来实现的。</p><p><strong>调用方连接池如何根据service的处理能力，动态+自适应的进行负载调度？</strong></p><p><strong>方案一：可以通过“静态权重”标识service的处理能力。</strong></p><p><img src="https://ae01.alicdn.com/kf/HTB1KqTrTgHqK1RjSZFg7617JXXaF.png" alt="静态权重"></p><p>可以为每个下游service设置一个“权重”，代表service的处理能力，来调整访问到每个service的概率，如上图所示：</p><p>(1) 假设ip1，ip2，ip3的处理能力相同，可以设置weight1=1，weight2=1，weight3=1，这样三个service连接被获取到的概率分别就是1/3，1/3，1/3，能够保证均衡访问；</p><p>(2) 假设ip1的处理能力是ip2，ip3的处理能力的2倍，可以设置weight1=2，weight2=1，weight3=1，这样三个service连接被获取到的概率分别就是2/4，1/4，1/4，能够保证处理能力强的service分到等比的流量，不至于资源浪费；</p><p>Nginx就具备类似的能力。</p><p><strong>方案优点</strong>：简单粗暴，能够快速的实现异构服务器的负载均衡。</p><p><strong>方案缺点</strong>：权重是固定的，无法自适应动态调整，而很多时候，服务器的处理能力是很难用一个固定的数值量化。</p><p><strong>方案二：通过“动态权重”标识service的处理能力。</strong></p><p><strong>如何来标识一个service的处理能力呢？</strong></p><p>服务能不能处理得过来，该由调用方说了算：</p><ul><li>调用服务，快速处理，处理能力跟得上</li><li>调用服务，处理超时，处理能力很有可能跟不上了</li></ul><p><strong>如何来设计动态权重？</strong></p><p>可以这么玩：</p><p>(1) 用一个动态权重，来标识每个service的处理能力，默认初始处理能力相同，即分配给每个service的概率相等；</p><p>(2) 每当service成功处理一个请求，认为service处理能力足够，权重动态+1；</p><p>(3) 每当service超时处理一个请求，认为service处理能力可能要跟不上了，权重动态-10；</p><p><em>权重下降，会比权重上升更快。</em></p><p><em>为了方便权重的处理，可以把权重的范围限定为[0, 100]，把权重的初始值设为60分。</em></p><p>举例说明：</p><p>假设service-ip1，service-ip2，service-ip3的动态权重初始值：</p><ul><li>weight1=60</li><li>weight2=60</li><li>weight3=60</li></ul><p>刚开始时，请求分配给这3台service的概率分别是60/180，60/180，60/180，即负载是均衡的。</p><p>随着时间的推移：</p><ul><li>处理能力强的service成功处理的请求越来越多</li><li>处理能力弱的service偶尔有超时</li></ul><p>随着动态权重的增减，权重会发生变化：</p><ul><li>weight1=100</li><li>weight2=60</li><li>weight3=40</li></ul><p>那么此时，请求分配给这3台service的概率分别是100/200，60/200，40/200，即处理能力强的service会被分配到更多的流量。</p><p><strong>那什么是过载保护？</strong></p><p><img src="https://ae01.alicdn.com/kf/HTB1mJvpTlLoK1RjSZFu760n0XXad.png" alt="过载保护"></p><p>如上图所示，如果没有过载保护：</p><ul><li>随着外部负载的不断升高，系统实际处理负载会增加</li><li>外部负载升高到一个临界值，系统会被压垮，实际处理能力会降为0，即“掉底”</li></ul><p><strong>过载保护</strong>，是指当外部负载超过系统处理能力时，系统会进行自我保护，依然能对外提供有损的稳定服务。</p><p><img src="https://ae01.alicdn.com/kf/HTB1C.3Nafc3T1VjSZLe762ZsVXa2.png" alt="保护稳定"></p><p>如上图所示，如果进行了过载保护：</p><ul><li>随着外部负载的不断升高，系统实际处理负载会增加</li><li>外部负载即使超过一个临界值，系统不会被压垮，而能保持一定的处理能力</li></ul><p><strong>那如何进行过载保护？</strong></p><p><strong>方案一：可以通过“静态权重”标识service的处理能力。</strong></p><p>这是最简易的方式，服务端设定一个负载阈值，超过这个阈值的请求压过来，全部抛弃。（不推荐）</p><p><strong>方案二：借助“动态权重”来实施过载保护。</strong></p><p>如同异构服务器负载均衡，仍然通过：</p><ul><li>成功处理加分(+1)</li><li>处理超时扣分(-10)</li></ul><p>这种动态权重，来标识后端的处理能力。（仍然是连接池实现）</p><p>当一个服务端屡次处理超时，权重不断降低时，连接池只要实施一些策略，就能够对“疑似过载”的服务器进行降压，而不用服务器“抛弃请求”这么粗暴的实施过载保护。</p><p><strong>应该实施什么样的策略，来对“疑似过载”的服务器进行降压保护呢？</strong></p><p>可以这么玩：</p><p>(1) 如果某一个服务器，连续3个请求都超时，即连续-10分三次，就可以认为，服务器<strong>处理不过来了</strong>，得给这个服务器喘一<strong>小</strong>口气，于是设定策略：接下来的若干时间内，例如1秒，负载不再分配给这个服务器；</p><p>(2) 如果某一个service的动态权重，降为了0（休息了3次还超时），就可以认为，服务器<strong>完全处理不过来了</strong>，得给这个服务器喘一<strong>大</strong>口气，于是设定策略：接下来的若干时间内，例如1分钟，请求不再分配给这个服务器；</p><p>这样的话，不但能借助“动态权重”来实施动态自适应的异构服务器负载均衡，还能在客户端层面更优雅的实施过载保护，在某个下游服务器快要响应不过来的时候，给其喘息的机会。</p><p><strong>过载保护要注意什么问题？</strong></p><p>要防止过载保护引起服务器的雪崩，如果“整体负载”已经超过了“服务器集群”的处理能力，怎么转移请求也是处理不过来的。这时，还是得通过抛弃请求来实施自我保护。</p><p><strong>总结</strong></p><ul><li>负载均衡、故障转移、超时处理通常是连接池层面来实施的</li><li>异构服务器负载均衡，最简单的方式是静态权重法，缺点是无法自适应动态调整</li><li>动态权重法，可以动态的根据服务器的处理能力来分配负载，需要有连接池层面的微小改动</li><li>过载保护，是在负载过高时，服务器为了保护自己，保证一定处理能力的一种自救方式</li><li>动态权重法，还可以用做服务器的过载保护</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;负载均衡&lt;/strong&gt;是指，将请求/数据分摊到多个操作单元上执行，关键在于&lt;strong&gt;均衡&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;然而，后端的服务器有可能硬件条件不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果对标低配的服务器“均匀”分摊负载，高配的服务器利用率会不足&lt;/li&gt;
&lt;li&gt;如果对标高配的服务器“均匀”分摊负载，低配的服务器会扛不住</summary>
    
    
    
    <category term="架构设计" scheme="https://abnerwei.com/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="架构设计" scheme="https://abnerwei.com/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>反向代理与DNS轮询</title>
    <link href="https://abnerwei.com/post/81dc48fa"/>
    <id>https://abnerwei.com/post/81dc48fa</id>
    <published>2018-12-02T15:21:59.000Z</published>
    <updated>2018-12-02T15:21:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>反向代理层有什么用？架构实现时要注意什么？</strong></p><p>(1) <strong>作为服务端统一入口</strong>，屏蔽后端WEB集群细节，代表整个WEB集群；<br>(2) <strong>保证WEB集群的扩展性</strong>，Nginx后端可随时加WEB实例；<br>(3) <strong>实施负载均衡</strong>，反向代理层会将请求均匀分发给后端WEB集群的每一个实例；</p><span id="more"></span><p>(4) <strong>保证WEB集群的高可用</strong>，任何一个WEB实例挂了，服务都不受影响；<br>(5) <strong>注意自身高可用</strong>，防止一台Nginx挂了，服务端统一入口受影响；</p><p><strong>反向代理层还存在啥问题？</strong></p><p>反向代理层自身的扩展性问题并没有得到很好的解决，例如当Nginx成为系统瓶颈的时候，无法扩容。</p><p><strong>DNS轮询如何解决反向代理层的扩展性问题？</strong></p><p>通过在DNS-server上对一个域名设置多个IP解析，能够增加入口Nginx实例个数，起到水平扩容的作用，解决反向代理层的扩展性问题。</p><p>因此，反向代理和DNS轮询并不是互斥的技术。以下是接入层的架构渐进历程。</p><p><strong>裸奔时代（1）单机架构</strong></p><p><img src="https://ae01.alicdn.com/kf/HTB1bGftTgHqK1RjSZFP763wapXao.png" alt="单机架构"><br>裸奔时代的架构图如上：<br>(1) 浏览器通过DNS-server，域名解析到ip；<br>(2) 浏览器通过ip访问web-server；</p><p>缺点：<br>(1) 非高可用，web-server挂了整个系统就挂了；<br>(2) 扩展性差，当吞吐量达到web-server上限时，无法扩容；</p><p><strong>简易扩容方案（2）DNS轮询</strong></p><p>假设golang-proxy的吞吐量是10000次每秒，当系统总吞吐量达到30000时，如何扩容是首先要解决的问题，DNS轮询是一个很容易想到的方案。<br><img src="https://ae01.alicdn.com/kf/HTB1fYrpTbvpK1RjSZPi762mwXXa5.png" alt="DNS轮询"><br>此时的架构图如上：<br>(1) 多部署几份web-server，1个golang-proxy抗10000，部署3个golang-proxy就能抗30000；<br>(2) 在DNS-server层面，域名每次解析到不同的ip；</p><p>优点：<br>(1) <strong>零成本</strong>：在DNS-server上多配几个ip即可，功能也不收费；<br>(2) <strong>部署简单</strong>：多部署几个web-server即可，原系统架构不需要做任何改造；<br>(3) <strong>负载均衡</strong>：变成了多机，负载也是均衡的；</p><p>缺点：<br>(1) <strong>非高可用</strong>：DNS-server只负责域名解析ip，这个ip对应的服务是否可用，DNS-server是不保证的，假设有一个web-server挂了，部分服务会受到影响；<br>(2) <strong>扩容非实时</strong>：DNS解析有一个生效周期；<br>(3) <strong>暴露了太多的外网ip</strong>；</p><p><strong>简易扩容方案（3）反向代理Nginx</strong></p><p>Golang-proxy的性能较差，但Nginx作为反向代理的性能就强很多，假设线上跑到10w，就比golang-proxy高了10倍，可以利用这个特性来做扩容。<br><img src="https://ae01.alicdn.com/kf/HTB1HovtTcbpK1RjSZFy760_qFXai.png" alt="反向代理nginx"><br>此时的架构图如上：<br>(1) 站点层与浏览器层之间加入了一个反向代理层，利用高性能的Nginx来做反向代理；<br>(2) Nginx将http请求分发给后端多个web-server；</p><p>优点：<br>(1) DNS-server不需要动；<br>(2) <strong>负载均衡</strong>：通过Nginx来保证；<br>(3) <strong>只暴露一个外网ip</strong>，Nginx-&gt;golang-proxy之间使用内网访问；<br>(4) <strong>扩容实时</strong>：Nginx内部可控，随时增加web-server随时实时扩容；<br>(5) <strong>能够保证站点层的可用性</strong>：任何一台golang-proxy挂了，Nginx可以将流量迁移到其他golang-proxy；</p><p>缺点：<br>(1) <strong>时延增加+架构更复杂了</strong>：中间多加了一个反向代理层；<br>(2) <strong>反向代理层成了单点</strong>，非高可用：golang-proxy挂了不影响服务，Nginx挂了怎么办？</p><p><strong>高可用方案（4）keepalived</strong></p><p>为了解决高可用的问题，需要keepalived。<br><img src="https://ae01.alicdn.com/kf/HTB1IOYuTbrpK1RjSZTE763WAVXaJ.png" alt="keepalived"><br>(1) 做两台Nginx组成一个集群，分别部署上keepalived，设置成相同的虚IP，保证Nginx的高可用；<br>(2) 当一台Nginx挂了，keepalived能够探测到，并将流量自动迁移到另一台Nginx上，整个过程对调用方透明；<br><img src="https://ae01.alicdn.com/kf/HTB1ahvtTmzqK1RjSZFp761kSXXaP.png" alt="keepalived异常"></p><p>优点：<br>(1) 解决了高可用的问题；</p><p>缺点：<br>(1) **资源利用率只有50%**；<br>(2) Nginx仍然是接入单点，如果接入吞吐量超过的Nginx的性能上限？</p><p><strong>scale up扩容方案（5）lvs/f5</strong></p><p>Nginx是应用软件，性能比应用服务好，但总有个上限，超出了上限，还是扛不住。</p><p>lvs就不一样了，它实施在操作系统层面；f5的性能又更好了，它实施在硬件层面；它们性能比Nginx好很多，例如每秒可以抗10w，这样可以利用他们来扩容，常见的架构图如下：</p><p><img src="https://ae01.alicdn.com/kf/HTB1zTLBThjaK1RjSZFA762dLFXaC.png" alt="lvs"></p><p>(1) 如果通过Nginx可以扩展多个tomcat一样，可以通过lvs来扩展多个Nginx；<br>(2) 通过keepalived+VIP的方案可以保证可用性；</p><p><strong>还有什么潜在问题？</strong></p><p>好吧，不管是使用lvs还是f5，这些都是scale up的方案，根本上，lvs/f5还是会有性能上限，假设每秒能处理10w的请求，一天也只能处理80亿的请求（10w秒吞吐量*8w秒），那万一系统的日PV超过80亿怎么办呢？</p><p><strong>scale out扩容方案（6）DNS轮询</strong></p><p>如之前文章所述，水平扩展，才是解决性能问题的根本方案，能够通过加机器扩充性能的方案才具备最好的扩展性。</p><p>还是得通过DNS轮询来进行扩容。</p><p><img src="https://ae01.alicdn.com/kf/HTB1XXDSThjaK1RjSZKz760VwXXa5.png" alt="DNS轮询扩展性"></p><p>(1) 通过DNS轮询来线性扩展入口lvs层的性能；<br>(2) 通过keepalived来保证高可用；<br>(3) 通过lvs来扩展多个Nginx；<br>(4) 通过Nginx来做负载均衡，业务七层路由；</p><p><strong>总结</strong></p><p>稍微做一个简要的总结：</p><p>(1) 接入层架构要考虑的问题域为：<strong>高可用、扩展性、反向代理、负载均衡</strong>；<br>(2) Nginx、keepalived、lvs、f5可以很好的解决高可用、扩展性、反向代理、负载均衡的问题；<br>(3) 水平扩展<strong>scale out是解决扩展性问题的根本方案</strong>，DNS轮询是不能完全被Nginx/lvs/f5所替代的；</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;反向代理层有什么用？架构实现时要注意什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(1) &lt;strong&gt;作为服务端统一入口&lt;/strong&gt;，屏蔽后端WEB集群细节，代表整个WEB集群；&lt;br&gt;(2) &lt;strong&gt;保证WEB集群的扩展性&lt;/strong&gt;，Nginx后端可随时加WEB实例；&lt;br&gt;(3) &lt;strong&gt;实施负载均衡&lt;/strong&gt;，反向代理层会将请求均匀分发给后端WEB集群的每一个实例；&lt;/p&gt;</summary>
    
    
    
    <category term="架构设计" scheme="https://abnerwei.com/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="架构设计" scheme="https://abnerwei.com/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>关于负载均衡方案</title>
    <link href="https://abnerwei.com/post/73a917da"/>
    <id>https://abnerwei.com/post/73a917da</id>
    <published>2018-11-19T13:30:59.000Z</published>
    <updated>2018-11-19T13:30:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>什么是负载均衡？</strong></p><p>负载均衡（Load Balance）是分布式系统架构设计中必须考虑的因素之一，它通常是指，将请求/数据均匀分摊到多个操作单元上执行，负载均衡的关键在于均匀。</p><span id="more"></span><p><strong>常见的负载均衡方案有哪些？</strong></p><p><img src="https://ae01.alicdn.com/kf/HTB1VvftTjTpK1RjSZKP7613UpXaG.png" alt="负载均衡方式"></p><p>常见互联网分布式架构如上，分为：</p><ul><li>客户端层</li><li>反向代理层</li><li>站点层</li><li>服务层</li><li>数据层</li></ul><p>每一个下游都有多个上游调用，只需要做到，<strong>每一个上游都均匀访问每一个下游</strong>，就能实现整体的均匀分摊。</p><p><strong>第一层：客户端层到反向代理层</strong></p><p><img src="https://ae01.alicdn.com/kf/HTB1_f2tTjTpK1RjSZKP7613UpXag.png" alt="客户端负载均衡"></p><p>客户端层到反向代理层的负载均衡，是通过“DNS轮询”实现的。</p><p>DNS-Server对于一个域名配置了多个解析IP，每次DNS解析请求来访问DNS-Server，会轮询返回这些IP，保证每个IP的解析率是相同的。这些IP就是Nginx的外网IP，以做到每台Nginx的请求分配也是均衡的。</p><p><strong>第二层：反向代理层到站点层</strong></p><p><img src="https://ae01.alicdn.com/kf/HTB1mY2tTmzqK1RjSZFp761kSXXaN.png" alt="反向代理层到站点层"></p><p>反向代理层到站点层的负载均衡，是通过“nginx”实现的。</p><p>修改nginx.conf，可以实现多种均衡策略：</p><p>(1) <strong>请求轮询</strong>：和DNS轮询类似，请求依次路由到各个web-server；</p><p>(2) <strong>最少连接路由</strong>：哪个web-server的连接少，路由到哪个web-server；</p><p>(3) <strong>ip哈希</strong>：按照访问用户的ip哈希值来路由web-server，只要用户的ip分布是均匀的，请求理论上也是均匀的，ip哈希均衡方法可以做到，同一个用户的请求固定落到同一台web-server上，此策略适合有状态服务，例如session；</p><p><strong>第三层：站点层到服务层</strong></p><p><img src="https://ae01.alicdn.com/kf/HTB1WcYpTmzqK1RjSZFj762lCFXam.png" alt="站点层到服务层"></p><p>站点层到服务层的负载均衡，是通过“服务连接池”实现的。</p><p>上游连接池会建立与下游服务多个连接，每次请求会“随机”选取连接来访问下游服务。除了<strong>负载均衡</strong>，服务连接池还能够实现<strong>故障转移</strong>、<strong>超时处理</strong>、<strong>限流限速</strong>、<strong>ID串行化</strong>等诸多功能。</p><p><strong>第四层：访问数据层</strong></p><p>在数据量很大的情况下，由于数据层（db/cache）涉及数据的水平切分，所以数据层的负载均衡更为复杂一些，它分为“数据的均衡”，与“请求的均衡”。</p><p><strong>数据的均衡</strong>是指：水平切分后的每个服务（db/cache），数据量是均匀的。</p><p><strong>请求的均衡</strong>是指：水平切分后的每个服务（db/cache），请求量是均匀的。</p><p>业内常见的<strong>水平切分方式</strong>有这么几种：</p><p><strong>一、按照range水平切分</strong></p><p><img src="https://ae01.alicdn.com/kf/HTB1fWrATgHqK1RjSZFk760.WFXas.png" alt="range切分"></p><p>每一个数据服务，存储一定范围的数据：</p><ul><li>user0服务：存储uid范围1-1kw</li><li>user1服务：存储uid范围1kw-2kw</li></ul><p>这个方案的<strong>好处</strong>是：</p><ul><li>规则简单，service只需判断一下uid范围就能路由到对应的存储服务</li><li>数据均衡性较好</li><li>比较容易扩展，可以随时加一个uid[2kw,3kw]的数据服务</li></ul><p><strong>不足</strong>是：</p><ul><li>请求的负载不一定均衡，一般来说，新注册的用户会比老用户更活跃，大range的服务请求压力会更大</li></ul><p><strong>二、按照id哈希水平切分</strong></p><p><img src="https://ae01.alicdn.com/kf/HTB1i1YQThnaK1RjSZFB763W7VXaE.png" alt="按id哈希水平区分"></p><p>每一个数据服务，存储某个key值hash后的部分数据：</p><ul><li>user0服务：存储偶数uid数据</li><li>user1服务：存储奇数uid数据</li></ul><p>这个方案的<strong>好处</strong>是：</p><ul><li>规则简单，service只需对uid进行hash能路由到对应的存储服务</li><li>数据均衡性较好</li><li>请求均匀性较好</li></ul><p><strong>不足</strong>是：</p><ul><li>不容易扩展，扩展一个数据服务，hash方法改变时候，可能需要进行数据迁移</li></ul><p><strong>总结</strong></p><p>负载均衡（Load Balance）是分布式系统架构设计中必须考虑的因素之一，它通常是指，将请求/数据均匀分摊到多个操作单元上执行，其的关键在于均匀：</p><ul><li><strong>反向代理层</strong>的负载均衡，是通过“DNS轮询”实现的</li><li><strong>站点层</strong>的负载均衡，是通过“nginx”实现的</li><li><strong>服务层</strong>的负载均衡，是通过“服务连接池”实现的</li><li><strong>数据层</strong>的负载均衡，要考虑“<strong>数据的均衡</strong>”与“<strong>请求的均衡</strong>”两个点，常见的方式有“按照范围水平切分”与“hash水平切分”</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;什么是负载均衡？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;负载均衡（Load Balance）是分布式系统架构设计中必须考虑的因素之一，它通常是指，将请求/数据均匀分摊到多个操作单元上执行，负载均衡的关键在于均匀。&lt;/p&gt;</summary>
    
    
    
    <category term="架构设计" scheme="https://abnerwei.com/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="架构设计" scheme="https://abnerwei.com/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
</feed>
